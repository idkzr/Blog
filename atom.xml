<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>无名小筑</title>
  
  <subtitle>分别便是为了重逢</subtitle>
  <link href="https://blog.zr.ci/atom.xml" rel="self"/>
  
  <link href="https://blog.zr.ci/"/>
  <updated>2020-11-26T14:11:00.000Z</updated>
  <id>https://blog.zr.ci/</id>
  
  <author>
    <name>箴扰</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Heroku部署安装Typecho</title>
    <link href="https://blog.zr.ci/posts/typechoonheroku.html"/>
    <id>https://blog.zr.ci/posts/typechoonheroku.html</id>
    <published>2020-11-26T14:11:00.000Z</published>
    <updated>2020-11-26T14:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>突然发现Heroku的玩法属实不少，便想着能不能在Heroku上部署安装Typecho，写篇文章记录一下。</p><a id="more"></a><h2 id="什么是-heroku？">什么是 Heroku？<a title="#什么是-heroku？" href="#什么是-heroku？"></a></h2><p>Heroku 是一个支持多种编程语言的 PaaS(Platform-as-a-Service)。在 2010 年被 Salesforce 收购。Heroku 作为最开始的云平台之一，从 2007 年 6 月起开始开发，当时它仅支持 Ruby，后来增加了对 Java、Node.js、Scala、Clojure、Python 以及 PHP 和 Perl 的支持。</p><h2 id="1.heroku基本配置">1.Heroku基本配置<a title="#1.heroku基本配置" href="#1.heroku基本配置"></a></h2><p>首先，我们需要一个 Heroku 账号，如果你还没有，请自行注册一个，并绑定一张信用卡&amp;借记卡，这里不做多讲。</p><h3 id="1.1-安装heroku-cli">1.1 安装Heroku-cli<a title="#1.1-安装heroku-cli" href="#1.1-安装heroku-cli"></a></h3><p>如果你的设备上已经安装了 Nodejs ，那么可以使用：<code>npm i heroku-cli -g</code>来安装<code>heroku-cli</code></p><p>否则请按照<a href="https://devcenter.heroku.com/articles/heroku-cli" target="_blank">官方文档</a>安装 <code>heroku-cli</code></p><p>安装完成后使用：<code>heroku version</code>来检查是否成功安装，如有类似以下输出则代表安装成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> heroku version</span></span><br><span class="line">heroku-cli/7.0.9 android-arm64 node-v12.18.3</span><br></pre></td></tr></table></figure><h3 id="1.2-配置heroku-cli">1.2 配置Heroku-cli<a title="#1.2-配置heroku-cli" href="#1.2-配置heroku-cli"></a></h3><p>安装完成<code>heroku-cli</code>后，使用<code>heroku login -i</code>登陆Heroku，回显如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> heroku login -i</span></span><br><span class="line">heroku: Enter your login credentials</span><br><span class="line">Email: idkzrs@gmail.com</span><br><span class="line">Password: </span><br><span class="line">Two-factor code: </span><br><span class="line">Logged in as idkzrs@gmail.com</span><br></pre></td></tr></table></figure><p>如果以上命令无法登陆，请参考<a href="https://blog.zr.ci/posts/herokuclilogin" target="_blank">解决 Heroku-cli 无法登陆</a></p><p>然后添加 SSH 密钥:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ heroku keys:add</span><br></pre></td></tr></table></figure><h2 id="2.部署typecho至heroku">2.部署Typecho至Heroku<a title="#2.部署typecho至heroku" href="#2.部署typecho至heroku"></a></h2><p>heroku-cli配置完成后就可以开始准备部署了。</p><h3 id="2.1-新建-typecho-项目">2.1 新建 Typecho 项目<a title="#2.1-新建-typecho-项目" href="#2.1-新建-typecho-项目"></a></h3><p>拉取Typecho源码并修改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/typecho/typecho.git</span><br><span class="line">cd typecho</span><br><span class="line">rm -rf .git* changelog.txt .editorconfig README.md</span><br><span class="line">git clone https://github.com/rvvcim/typecho-on-heroku.git</span><br><span class="line">mv toh/* toh/.htaccess .</span><br><span class="line">rm -rf toh</span><br></pre></td></tr></table></figure><p>初始化Git仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m &#x27;init heroku-te&#x27;</span><br></pre></td></tr></table></figure><h3 id="2.2-新建-heroku-应用">2.2 新建 Heroku 应用<a title="#2.2-新建-heroku-应用" href="#2.2-新建-heroku-应用"></a></h3><p>这步可以在web操作，也可以使用 heroku-cli 进行配置，这里我使用 cli 来进行操作。<br>使用<code>heroku create</code>新建APP，创建成功将会输出类似如下内容:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> heroku create</span></span><br><span class="line">Creating app... done, ⬢ xxxxxx-xxxx-12345</span><br><span class="line">https://xxxxxx-xxxx-12345.herokuapp.com/ | https://git.heroku.com/xxxxxx-xxxx-12345</span><br></pre></td></tr></table></figure><p>其中：<br><code>xxxxxx-xxxx-12345</code>为应用名称<br><code>https://xxxxxx-xxxx-12345.herokuapp.com/</code>为访问链接<br><code>https://git.heroku.com/xxxxxx-xxxx-12345</code>为git仓库</p><p>应用名称可以使用<code>heroku rename</code>进行修改，此操作将会同步修改访问链接和git仓库地址，如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> heroku rename zr-te</span></span><br></pre></td></tr></table></figure><h3 id="2.3-设置应用语言">2.3 设置应用语言<a title="#2.3-设置应用语言" href="#2.3-设置应用语言"></a></h3><p>使用如下命令将应用语言设置为PHP：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heroku buildpacks:set heroku/php</span><br></pre></td></tr></table></figure><p>若不设置语言可能导致上传时报错</p><h3 id="2.3-数据库配置">2.3 数据库配置<a title="#2.3-数据库配置" href="#2.3-数据库配置"></a></h3><p>Heroku提供了 MySQL 和 PgSQL 两种数据库，以插件形式添加，并各有一定免费额度，两种数据库二选一即可。<br>添加MySQL插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heroku addons:create jawsdb-maria:kitefin</span><br></pre></td></tr></table></figure><p>添加PgSQL插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heroku addons:create heroku-postgresql:hobby-dev</span><br></pre></td></tr></table></figure><p>注：二选一即可，我这里使用MySQL举例。</p><p>添加完 MySQL/PgSQL后，前往<a href="https://dashboard.heroku.com/apps" target="_blank">Heroku管理面板</a>，找到刚才新建的应用，点击导航栏中的<strong>Settings</strong>，找到 <strong>Config Vars</strong> 项，点击<strong>Reveal Config Vars</strong><br><img src="/storage/emulated/0/ZR/static/imgs/typechoonheroku/configvars.jpg" alt=""><br>将会显示MySQL/PgSQL连接信息，解析如下：</p><div class="φcy"><div class="φda"><table><thead><tr><th style="text-align:center">NAME</th><th style="text-align:center">KEY</th><th style="text-align:center">VALUE</th></tr></thead><tbody><tr><td style="text-align:center">MySQL</td><td style="text-align:center">JAWSDB_MARIA_URL</td><td style="text-align:center">mysql://用户名:密码@数据库主机:3306/数据库名称</td></tr><tr><td style="text-align:center">PgSQL</td><td style="text-align:center">DATABASE_URL</td><td style="text-align:center">postgres://用户名:密码@数据库主机:5432/数据库名称</td></tr></tbody></table></div></div><p>修改config.inc.php文件中数据库相关配置：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 定义MySQL数据库参数 */</span></span><br><span class="line"><span class="comment">/**与下方PgSQL参数无法共存，请选择一项进行填写</span></span><br><span class="line"><span class="comment">$db = new Typecho_Db(&#x27;Pdo_Mysql&#x27;, &#x27;typecho_&#x27;);</span></span><br><span class="line"><span class="comment">$db-&gt;addServer(array (</span></span><br><span class="line"><span class="comment">  &#x27;host&#x27; =&gt; &#x27;数据库地址&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;user&#x27; =&gt; &#x27;数据库用户名&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;password&#x27; =&gt; &#x27;数据库密码&#x27;,                                           &#x27;charset&#x27; =&gt; &#x27;utf8mb4&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;port&#x27; =&gt; &#x27;3306&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;database&#x27; =&gt; &#x27;数据库名称&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;engine&#x27; =&gt; &#x27;MyISAM&#x27;,</span></span><br><span class="line"><span class="comment">), Typecho_Db::READ | Typecho_Db::WRITE);</span></span><br><span class="line"><span class="comment">Typecho_Db::set($db);        **/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 定义PgSQL数据库参数 */</span></span><br><span class="line"><span class="comment">/**与上方MySQL参数无法共存，请选择一项进行填写</span></span><br><span class="line"><span class="comment">$db = new Typecho_Db(&#x27;Pdo_Pgsql&#x27;, &#x27;typecho_&#x27;);</span></span><br><span class="line"><span class="comment">$db-&gt;addServer(array (</span></span><br><span class="line"><span class="comment">  &#x27;host&#x27; =&gt; &#x27;数据库地址&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;user&#x27; =&gt; &#x27;数据库用户名&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;password&#x27; =&gt; &#x27;数据库密码&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;charset&#x27; =&gt; &#x27;utf8&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;port&#x27; =&gt; &#x27;5432&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;database&#x27; =&gt; &#x27;数据库名称&#x27;,</span></span><br><span class="line"><span class="comment">), Typecho_Db::READ | Typecho_Db::WRITE);</span></span><br><span class="line"><span class="comment">Typecho_Db::set($db);        **/</span></span><br></pre></td></tr></table></figure><p>删除其中一项的注释，并填写相关配置，然后更新git仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &#x27;update config&#x27;</span><br></pre></td></tr></table></figure><h3 id="2.4-推送项目至heroku">2.4 推送项目至Heroku<a title="#2.4-推送项目至heroku" href="#2.4-推送项目至heroku"></a></h3><p>接下来，使用如下命令将项目推送至Heroku</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push heroku master</span><br></pre></td></tr></table></figure><p>然后打开：https://<code>APP_NAME</code>.herokuapp.com/install.php<br>安装typecho</p><h2 id="3.绑定域名">3.绑定域名<a title="#3.绑定域名" href="#3.绑定域名"></a></h2><p>这一步非必须，为可选步骤。<br>前往<a href="https://dashboard.heroku.com/apps" target="_blank">Heroku管理面板</a>，找到新建的应用，点击导航栏中的<strong>Settings</strong>，下拉找到<strong>Domains</strong><br>点击<strong>Add domains</strong><br><img src="/storage/emulated/0/ZR/static/imgs/typechoonheroku/addom.jpg" alt=""><br><img src="/storage/emulated/0/ZR/static/imgs/typechoonheroku/editdom.jpg" alt=""><br>将域名解析至cname地址即可</p><p>Enjoy !</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;突然发现Heroku的玩法属实不少，便想着能不能在Heroku上部署安装Typecho，写篇文章记录一下。&lt;/p&gt;</summary>
    
    
    
    <category term="瞎折腾" scheme="https://blog.zr.ci/categories/xzt/"/>
    
    
    <category term="Heroku,Typecho" scheme="https://blog.zr.ci/tags/Heroku-Typecho/"/>
    
  </entry>
  
  <entry>
    <title>解决 Heroku-cli 无法登陆</title>
    <link href="https://blog.zr.ci/posts/herokuclilogin.html"/>
    <id>https://blog.zr.ci/posts/herokuclilogin.html</id>
    <published>2020-10-17T14:11:00.000Z</published>
    <updated>2020-10-17T14:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在折腾 heroku 部署 OLAINDEX 时，使用 <code>heroku login</code> 但出现报错</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> ›   Warning: login is not a heroku command.</span><br><span class="line">Did you mean join? [y&#x2F;n]: y</span><br><span class="line"> ›   Error: Missing required flag:</span><br><span class="line"> ›    -a, --app APP  app to run command against</span><br><span class="line"> ›   See more help with --help</span><br></pre></td></tr></table></figure><p>随即便尝试使用<code>heroku login -i</code>但依旧是无法登陆</p><p>于是便去看了看 help ，找到了解决方法。</p><h3 id="1.获取-api-key">1.获取 API Key<a title="#1.获取-api-key" href="#1.获取-api-key"></a></h3><p>登陆 Heroku 后，前往 <a href="https://dashboard.heroku.com/account" target="_blank">Account settings</a> 页<br>找到<strong>API</strong>选项，点击 <strong>Reveal</strong> 复制 API Key</p><h3 id="2.新建-.netrc">2.新建 .netrc<a title="#2.新建-.netrc" href="#2.新建-.netrc"></a></h3><p>Linux：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch ~&#x2F;.netrc</span><br></pre></td></tr></table></figure><p>Windows：找到环境变量目录新建：<code>.netrc</code> 文件</p><h3 id="3.编辑-.netrc">3.编辑 .netrc<a title="#3.编辑-.netrc" href="#3.编辑-.netrc"></a></h3><p>使用vi/vim等编辑器编辑 <code>~/.netrc</code><br>输入如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">machine api.heroku.com</span><br><span class="line">  login #heroku绑定的邮箱</span><br><span class="line">  password #你的API Key</span><br><span class="line">machine git.heroku.com</span><br><span class="line">  login #heroku绑定的邮箱</span><br><span class="line">  password #你的API Key</span><br></pre></td></tr></table></figure><p>随后就可以尝试进行操作了233</p><p>Enjoy !</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在折腾 heroku 部署 OLAINDEX 时，使用 &lt;code&gt;heroku login&lt;/code&gt; 但出现报错&lt;/p&gt;</summary>
    
    
    
    <category term="瞎折腾" scheme="https://blog.zr.ci/categories/xzt/"/>
    
    
    <category term="Heroku" scheme="https://blog.zr.ci/tags/Heroku/"/>
    
  </entry>
  
  <entry>
    <title>小米MIX 2S System分区扩容</title>
    <link href="https://blog.zr.ci/posts/mix2skr.html"/>
    <id>https://blog.zr.ci/posts/mix2skr.html</id>
    <published>2020-08-09T14:11:00.000Z</published>
    <updated>2020-08-15T14:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言：">前言：<a title="#前言：" href="#前言："></a></h2><p>由于MIX 2s的System分区过小，导致部分gsi无法刷入，故扩容分区，顺便制作为卡刷包方便使用。</p><a id="more"></a><h2 id="设备要求：">设备要求：<a title="#设备要求：" href="#设备要求："></a></h2><p>i：确保您的设备为小米MIX 2s<br>ii：设备已解除BL锁并拥有第三方Recovery</p><h2 id="有损扩容">有损扩容<a title="#有损扩容" href="#有损扩容"></a></h2><h3 id="使用方法：">使用方法：<a title="#使用方法：" href="#使用方法："></a></h3><p>i：下载本人提供的 MIX2s_5GB_System.zip 文件<br>ii：重启至Recovery<br>iii：找到 MIX2s_5GB_System.zip 并刷入<br>iv:重启至Recovery，格式化： System,Vendor,Data</p><p>注意：由于会清除 System,Vendor,Data 三个分区的数据，请提前备份您的所有重要数据，如果您的身边没有电脑或其它存储设备，请下载 los 的ROM并复制到 /cust 目录一份，方便刷入。</p><h3 id="原理：">原理：<a title="#原理：" href="#原理："></a></h3><p>使用sgdisk对磁盘进行重新分区</p><h3 id="常见问题：">常见问题：<a title="#常见问题：" href="#常见问题："></a></h3><p>Q:扩容之后可以还原吗？<br>A:可以，刷一次3GB的文件即可还原。另：如果已经扩容分区，之后想更换其它的大小的分区，请务必先还原。<br>Q:扩容之后可以刷官方ROM吗？<br>A:可以，但是需要注意官方有dm校验，不去除会卡第一屏，可以通过同时刷入magisk去除。<br>Q:扩容之后可以线刷吗？<br>A:可以，但不推荐这样做，如果需要线刷，请勿勾选锁定选项，否则可能会导致需要售后解决。<br>Q:为什么我扩容之后刷入ROM却显示System大小为3GB<br>A:这是因为ROM打包时是按照3GB大小打包的，请前往Recovery，点击：分区管理 - System - 调整分区大小。Vendor分区同理。</p><h2 id="无损扩容">无损扩容<a title="#无损扩容" href="#无损扩容"></a></h2><p>此方法极度危险，并且不推荐使用，如果您没有相关经验，请谨慎。<br>手机重启至第三方Recovery连接电脑，下载我提供的无损扩容文件<br>解压并进入目录,按 Shift+右键 选择打开Powershell<br>输入以下命令（此处为win10）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">./adb push sgdisk /sbin</span><br><span class="line">./adb shell</span><br><span class="line">comod 0777 /sbin/sgdisk</span><br><span class="line"></span><br><span class="line">sgdisk --delete=18 /dev/block/sda</span><br><span class="line">sgdisk --delete=19 /dev/block/sda</span><br><span class="line">sgdisk --delete=20 /dev/block/sda</span><br><span class="line">sgdisk --delete=47 /dev/block/sde</span><br><span class="line">sgdisk --delete=48 /dev/block/sde</span><br><span class="line"></span><br><span class="line">sgdisk --new 0:0:+1024M --change-name=18:vendor --typecode=18:97D7B011-54DA-4835-B3C4-917AD6E73D74 /dev/block/sda</span><br><span class="line">sgdisk --new 0:0:+64M --change-name=19:recovery --typecode=19:9D72D4E4-9958-42DA-AC26-BEA7A90B0434 /dev/block/sda</span><br><span class="line">sgdisk --new 0:0:0 --change-name=20:cache --typecode=20:5594C694-C871-4B5F-90B1-690A6F68E0F7 /dev/block/sda</span><br><span class="line">sgdisk --new 0:0:+512M --change-name=47:cust --typecode=47:C3008246-512A-4FEB-8A51-068FA4AD5F6D /dev/block/sde</span><br><span class="line">sgdisk --new 0:0:0 --change-name=48:system --typecode=48:97D7B011-54DA-4835-B3C4-917AD6E73D74 /dev/block/sde</span><br><span class="line"></span><br><span class="line">reboot bootloader</span><br></pre></td></tr></table></figure><p>此时手机将重启至fastboot，保持设备连接，在Powershell中输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./fastboot flash recovery recovery.img</span><br><span class="line">./fastboot boot recovery.img</span><br></pre></td></tr></table></figure><p>不出意外，您的手机将重启至Recovery ，请保持设备连接。<br>在Powershell中输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">./adb shell</span><br><span class="line"></span><br><span class="line">mke2fs -t ext4 -b 4096 /dev/block/sde47</span><br><span class="line">mke2fs -t ext4 -b 4096 /dev/block/sda18</span><br><span class="line">e2fsdroid -e -S /file_contexts -a /vendor /dev/block/sda18</span><br><span class="line">mke2fs -t ext4 -b 4096 /dev/block/sda20</span><br><span class="line">e2fsdroid -e -S /file_contexts -a /cache /dev/block/sda20</span><br><span class="line">mke2fs -t ext4 -b 4096 /dev/block/sde48</span><br><span class="line">e2fsdroid -e -S /file_contexts -a / /dev/block/sde48</span><br><span class="line">reboot recovery</span><br></pre></td></tr></table></figure><p>并在Recovery中格式化： System,Vendor,Data,Cache<br>至此，扩容完成。</p><p>下方是本人执行扩容时的回显内容，可以参考。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">PS C:\platform-tools&gt; ./adb push sgdisk /sbin</span><br><span class="line">PS C:\platform-tools&gt; ./adb shell</span><br><span class="line">sh-5.0# chmod 0777 /sbin/sgdisk</span><br><span class="line">sh-5.0# sgdisk --delete=18 /dev/block/sda</span><br><span class="line">Warning: The kernel is still using the old partition table.</span><br><span class="line">The new table will be used at the next reboot.</span><br><span class="line">The operation has completed successfully.</span><br><span class="line">sh-5.0# sgdisk --delete=19 /dev/block/sda</span><br><span class="line">Warning: The kernel is still using the old partition table.</span><br><span class="line">The new table will be used at the next reboot.</span><br><span class="line">The operation has completed successfully.</span><br><span class="line">sh-5.0# sgdisk --delete=20 /dev/block/sda</span><br><span class="line">Warning: The kernel is still using the old partition table.</span><br><span class="line">The new table will be used at the next reboot.</span><br><span class="line">The operation has completed successfully.</span><br><span class="line">sh-5.0# sgdisk --delete=47 /dev/block/sde</span><br><span class="line">The operation has completed successfully.</span><br><span class="line">sh-5.0# sgdisk --delete=48 /dev/block/sde</span><br><span class="line">The operation has completed successfully.</span><br><span class="line">sh-5.0# sgdisk --new 0:0:+1024M --change-name=18:vendor --typecode=18:97D7B011-54DA-4835-B3C4-917AD6E73D74 /dev/block/&gt;</span><br><span class="line">Setting name!</span><br><span class="line">partNum is 17</span><br><span class="line">REALLY setting name!</span><br><span class="line">Warning: The kernel is still using the old partition table.</span><br><span class="line">The new table will be used at the next reboot.</span><br><span class="line">The operation has completed successfully.</span><br><span class="line"></span><br><span class="line">sh-5.0# sgdisk --new 0:0:+64M --change-name=19:recovery --typecode=19:9D72D4E4-9958-42DA-AC26-BEA7A90B0434 /dev/block/&gt;</span><br><span class="line">Setting name!</span><br><span class="line">partNum is 18</span><br><span class="line">REALLY setting name!</span><br><span class="line">Warning: The kernel is still using the old partition table.</span><br><span class="line">The new table will be used at the next reboot.</span><br><span class="line">The operation has completed successfully.</span><br><span class="line">sh-5.0# sgdisk --new 0:0:+0 --change-name=20:cache --typecode=20:5594C694-C871-4B5F-90B1-690A6F68E0F7 /dev/block/sda</span><br><span class="line">Setting name!</span><br><span class="line">partNum is 19</span><br><span class="line">REALLY setting name!</span><br><span class="line">Warning: The kernel is still using the old partition table.</span><br><span class="line">The new table will be used at the next reboot.</span><br><span class="line">The operation has completed successfully.</span><br><span class="line"></span><br><span class="line">sh-5.0# sgdisk --new 0:0:+512M --change-name=47:cust --typecode=47:C3008246-512A-4FEB-8A51-068FA4AD5F6D /dev/block/sde</span><br><span class="line">Setting name!</span><br><span class="line">partNum is 46</span><br><span class="line">REALLY setting name!</span><br><span class="line">The operation has completed successfully.</span><br><span class="line">sh-5.0# sgdisk --new 0:0:0 --change-name=48:system --typecode=48:97D7B011-54DA-4835-B3C4-917AD6E73D74 /dev/block/sde</span><br><span class="line">Setting name!</span><br><span class="line">partNum is 47</span><br><span class="line">REALLY setting name!</span><br><span class="line">The operation has completed successfully.</span><br><span class="line">sh-5.0# sgdisk --print /dev/block/sde</span><br><span class="line">Disk /dev/block/sde: 1179648 sectors, 4.5 GiB</span><br><span class="line">Logical sector size: 4096 bytes</span><br><span class="line">Disk identifier (GUID): A9708BF8-6148-6573-F93F-EF3C911FC364</span><br><span class="line">Partition table holds up to 64 entries</span><br><span class="line">First usable sector is 6, last usable sector is 1179642</span><br><span class="line">Partitions will be aligned on 2-sector boundaries</span><br><span class="line">Total free space is 16379 sectors (64.0 MiB)</span><br><span class="line"></span><br><span class="line">Number  Start (sector)    End (sector)  Size       Code  Name</span><br><span class="line">   1               6              13   32.0 KiB    FFFF  sec</span><br><span class="line">   2              14              21   32.0 KiB    FFFF  limits</span><br><span class="line">   3              22              63   168.0 KiB   FFFF  bk41</span><br><span class="line">   4              64              95   128.0 KiB   FFFF  qupfw_a</span><br><span class="line">   5              96             127   128.0 KiB   FFFF  qupfw_b</span><br><span class="line">   6             128             191   256.0 KiB   FFFF  apdp</span><br><span class="line">   7             192             255   256.0 KiB   FFFF  msadp</span><br><span class="line">   8             256             287   128.0 KiB   FFFF  vbmeta</span><br><span class="line">   9             288             319   128.0 KiB   FFFF  bk42</span><br><span class="line">  10             320             351   128.0 KiB   FFFF  storsec_a</span><br><span class="line">  11             352             383   128.0 KiB   FFFF  storsec_b</span><br><span class="line">  12             384             447   256.0 KiB   FFFF  devcfg_a</span><br><span class="line">  13             448             511   256.0 KiB   FFFF  devcfg_b</span><br><span class="line">  14             512             639   512.0 KiB   FFFF  aop_a</span><br><span class="line">  15             640             767   512.0 KiB   FFFF  aop_b</span><br><span class="line">  16             768             895   512.0 KiB   FFFF  bk43</span><br><span class="line">  17             896            1023   512.0 KiB   FFFF  bk44</span><br><span class="line">  18            1024            1279   1024.0 KiB  FFFF  cmnlib_a</span><br><span class="line">  19            1280            1535   1024.0 KiB  FFFF  cmnlib_b</span><br><span class="line">  20            1536            1791   1024.0 KiB  FFFF  cmnlib64_a</span><br><span class="line">  21            1792            2047   1024.0 KiB  FFFF  cmnlib64_b</span><br><span class="line">  22            2048            2303   1024.0 KiB  FFFF  keymaster_a</span><br><span class="line">  23            2304            2559   1024.0 KiB  FFFF  keymaster_b</span><br><span class="line">  24            2560            2815   1024.0 KiB  FFFF  bluetooth</span><br><span class="line">  25            2816            3071   1024.0 KiB  FFFF  bk45</span><br><span class="line">  26            3072            3327   1024.0 KiB  FFFF  hyp_a</span><br><span class="line">  27            3328            3583   1024.0 KiB  FFFF  hyp_b</span><br><span class="line">  28            3584            3839   1024.0 KiB  FFFF  dip</span><br><span class="line">  29            3840            4095   1024.0 KiB  FFFF  bk46</span><br><span class="line">  30            4096            4607   2.0 MiB     FFFF  sti</span><br><span class="line">  31            4608            5119   2.0 MiB     FFFF  toolsfv</span><br><span class="line">  32            5120            5631   2.0 MiB     FFFF  abl_a</span><br><span class="line">  33            5632            6143   2.0 MiB     FFFF  abl_b</span><br><span class="line">  34            6144            7167   4.0 MiB     FFFF  tz_a</span><br><span class="line">  35            7168            8191   4.0 MiB     FFFF  tz_b</span><br><span class="line">  36            8192           10239   8.0 MiB     FFFF  fsg</span><br><span class="line">  37           10240           12287   8.0 MiB     FFFF  dtbo</span><br><span class="line">  38           12288           14335   8.0 MiB     FFFF  bk47</span><br><span class="line">  39           14336           16383   8.0 MiB     FFFF  spunvm</span><br><span class="line">  40           16384           20479   16.0 MiB    FFFF  bk48</span><br><span class="line">  41           20480           24575   16.0 MiB    FFFF  bk49</span><br><span class="line">  42           24576           32767   32.0 MiB    FFFF  splash</span><br><span class="line">  43           32768           40959   32.0 MiB    FFFF  logo</span><br><span class="line">  44           40960           49151   32.0 MiB    FFFF  dsp</span><br><span class="line">  45           49152           65535   64.0 MiB    FFFF  boot</span><br><span class="line">  46           65536          114687   192.0 MiB   0700  modem</span><br><span class="line">  47          114688          245759   512.0 MiB   FFFF  cust</span><br><span class="line">  48          245760         1163263   3.5 GiB     FFFF  system</span><br><span class="line">  49         1163264         1179642   64.0 MiB    FFFF  last_parti</span><br><span class="line">sh-5.0#</span><br></pre></td></tr></table></figure><h2 id="免责声明：">免责声明：<a title="#免责声明：" href="#免责声明："></a></h2><p>i：本人仅提供扩容文件，不对使用文件后造成的如：数据丢失、硬件损坏等后果负责。<br>ii：您必须明白并且承担使用文件后所造成的后果。<br>iii：如不同意以上内容请不要使用本文件。</p><p>扩容文件：<br>Link：<a href="https://pans.lanzous.com/b0dq5x2ni" target="_blank">https://pans.lanzous.com/b0dq5x2ni</a><br>Key:idkzr<br>扩容视频：<br><a href="http://www.bilibili.com/video/BV1gK411T74X" target="_blank">http://www.bilibili.com/video/BV1gK411T74X</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言：&quot;&gt;前言：&lt;a title=&quot;#前言：&quot; href=&quot;#前言：&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;由于MIX 2s的System分区过小，导致部分gsi无法刷入，故扩容分区，顺便制作为卡刷包方便使用。&lt;/p&gt;</summary>
    
    
    
    <category term="瞎折腾" scheme="https://blog.zr.ci/categories/xzt/"/>
    
    
    <category term="Android" scheme="https://blog.zr.ci/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>碎片化信息</title>
    <link href="https://blog.zr.ci/posts/sphxx.html"/>
    <id>https://blog.zr.ci/posts/sphxx.html</id>
    <published>2020-07-14T14:11:00.000Z</published>
    <updated>2020-07-14T14:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个碎片化信息超载的时代，人们看起来仿佛获得了越来越多的资讯，有了越来越大的思维认知空间，但实际上却越来越活在信息的孤岛中。</p><a id="more"></a><p>在信息不发达的时代，人们难以获得真相。在信息爆炸时代，人们只相信符合自己价Z观的真相。<br>信息的不断增多，带来的并不是兼听则明的理性认识、并不是求同存异的平和探讨、并不是带有自我审视自我称量的自知之明。<br>在这个“后真相时代”，能被人们装进脑袋里的，只有那些与原来的认知相容的信息碎片。<br>装的越多，他们就越“自信”。内容越同质，他们就越偏执。<br>人们在信息浪潮中并没有变得越来越聪明，而是表面看起来很聪明而实际上越来越蠢。<br>在思想的极化中，不同的人群皆被情绪和偏见裹挟，理性对话越来越困难，社会化认知正在因此不断走向撕裂。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这是一个碎片化信息超载的时代，人们看起来仿佛获得了越来越多的资讯，有了越来越大的思维认知空间，但实际上却越来越活在信息的孤岛中。&lt;/p&gt;</summary>
    
    
    
    <category term="碎碎念" scheme="https://blog.zr.ci/categories/ssn/"/>
    
    
    <category term="杂谈" scheme="https://blog.zr.ci/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>Hexo访问速度优化</title>
    <link href="https://blog.zr.ci/posts/hexospeed.html"/>
    <id>https://blog.zr.ci/posts/hexospeed.html</id>
    <published>2020-06-30T14:11:00.000Z</published>
    <updated>2020-06-30T14:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>相信各位大部分都是把hexo托管到github pages上，然鹅由于某众所周知的原因，github 在国内访问速度不太理想，便水一篇文章写一下我的解决方案。</p><a id="more"></a><p>本文默认读者已有一个使用Hexo搭建并放置于github pages的博客，故略去部分基础内容。</p><h2 id="1-国内优化">1 国内优化<a title="#1-国内优化" href="#1-国内优化"></a></h2><p>国内我选择的是又拍云，原因很简单：<strong>又拍云联盟</strong></p><p>又拍云联盟是由又拍云推出的开发者帮助计划，对开发者提供免费且完善的云存储、CDN 等服务，加速个人网站、博客、APP 等项目，每月可免费使用 10GB 存储空间及 15GB 的 CDN 流量（HTTP/HTTPS )对于个人博客来说妥妥够用。</p><h3 id="1.1-新建云储存">1.1 新建云储存<a title="#1.1-新建云储存" href="#1.1-新建云储存"></a></h3><p>在又拍云控制台点击云储存，新建一个云储存服务并记下服务名称，操作员名称，操作员密码及后面的CNAME地址。<br><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/hexospeed/cclx.png" alt="cclx"></p><h3 id="1.2-安装又拍云插件">1.2 安装又拍云插件<a title="#1.2-安装又拍云插件" href="#1.2-安装又拍云插件"></a></h3><p>进入Hexo根目录，打开命令行使用<code>npm install hexo-deployer-upyundeploy --save</code>安装又拍云上传插件。<br>打开Hexo根目录下_config.yml文件，找到<code>deploy</code>字段，添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  - type: upyun</span><br><span class="line">    serviceName: 服务名称</span><br><span class="line">    operatorName: 操作员名称</span><br><span class="line">    operatorPassword: 操作员密码</span><br></pre></td></tr></table></figure><p>随后可以使用<code>hexo cl &amp;&amp; hexo g &amp;&amp; hexo d</code>测试是否可用。</p><h2 id="2-国外优化">2 国外优化<a title="#2-国外优化" href="#2-国外优化"></a></h2><p>这步其实可有可无，因为github在国外的访问速度本就足够快，但为了避免再次发生类似前段时间针对github的中间人攻击，我选择再加上Cloudflare的CDN。</p><h3 id="2.1-接入cloudflare">2.1 接入Cloudflare<a title="#2.1-接入cloudflare" href="#2.1-接入cloudflare"></a></h3><p>由于CF官方限制免费用户无法使用CNAME接入，我这里选择使用第三方<a href="http://cdn.bnxb.com" target="_blank">CFP</a>。</p><p>使用CF账号登陆之后添加一个cname记录，记录值填写<code>username.github.io</code><br><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/hexospeed/cfjl.png" alt="cfjl"><br>(注:不要照抄，把username换成你的github用户名。。。)</p><p>随后会给出一个CNAME记录，记下来。<br><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/hexospeed/cfcname.png" alt="cfcname"></p><h3 id="3-设置域名解析">3 设置域名解析<a title="#3-设置域名解析" href="#3-设置域名解析"></a></h3><p>国内大部分DNS解析服务商都支持分线路解析，请自行将解析记录设置为默认线路CF，国内线路又拍。</p><h2 id="4-进阶设置">4 进阶设置<a title="#4-进阶设置" href="#4-进阶设置"></a></h2><p>看过我之前文章的应该知道，我把Hexo源文件放在了Coding上，并使用<a href="https://blog.zra.ink/posts/codingci" target="_blank">Coding CI实现Hexo的持续集成与Github和Coding的同步部署</a></p><p>使用又拍云储存之后，原本的的CI脚本便不在适用了，需要在21行之后另起一行，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh &#39;hexo d&#39;</span><br></pre></td></tr></table></figure><p>至此，速度优化便折腾完了，各位不妨一试。<br><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/hexospeed/cover.jpg" alt="cover"><br>Enjoy</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;相信各位大部分都是把hexo托管到github pages上，然鹅由于某众所周知的原因，github 在国内访问速度不太理想，便水一篇文章写一下我的解决方案。&lt;/p&gt;</summary>
    
    
    
    <category term="瞎折腾" scheme="https://blog.zr.ci/categories/xzt/"/>
    
    
    <category term="web" scheme="https://blog.zr.ci/tags/web/"/>
    
    <category term="Hexo" scheme="https://blog.zr.ci/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>盘点那些数量繁多的USB接口</title>
    <link href="https://blog.zr.ci/posts/usbjk.html"/>
    <id>https://blog.zr.ci/posts/usbjk.html</id>
    <published>2020-05-17T14:11:00.000Z</published>
    <updated>2020-05-17T14:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>USB协议推出的20多年间，出现了三大类，十数种不同的USB接口。本文就来说一下这些数量繁多的USB接口。</p><a id="more"></a><h2 id="1、-usb的科普及接口图">1、 USB的科普及接口图<a title="#1、-usb的科普及接口图" href="#1、-usb的科普及接口图"></a></h2><p>USB，是英文<code>Universal Serial Bus</code>（通用串行总线）的缩写，是一个外部总线标准，用于规范电脑与外部设备的连接和通讯。它是由以微软和英特尔为核心的 USB-IF 组织于1994年推出的标准。</p><h3 id="1.1、-usb类型">1.1、 USB类型<a title="#1.1、-usb类型" href="#1.1、-usb类型"></a></h3><p>USB类型有A、B两种，A型用于主机，B型用于设备（Type-A就是A型的接口）<br>Mini、Micro是小型化标准接口，而Mini、Micro或标准这三种规格都有A型和B型的接口。</p><h3 id="1.2、-usb接口一览">1.2、 USB接口一览<a title="#1.2、-usb接口一览" href="#1.2、-usb接口一览"></a></h3><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/usbjk/usbjk.jpg" alt="usbjk.jpg" class="φcx"></p><h2 id="2、-mini接口">2、 Mini接口<a title="#2、-mini接口" href="#2、-mini接口"></a></h2><p>Mini USB是最早的小型化标准接口，另外有个小名叫“T型口”，现已基本淘汰完毕，其中应用最广泛的是5pin，我们一般说Mini USB默认指的是B型 5pin，但现在仍不乏一些山寨厂商用在“玩具型”学习机、老年唱戏机以及一些音箱等等低端设备上面。</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/usbjk/mini.jpg" alt="mini.jpg" class="φcx"></p><h3 id="mini-ab">Mini-AB<a title="#mini-ab" href="#mini-ab"></a></h3><p>Mini USB有一种母座叫Mini-AB，可以同时兼容Mini-A和Mini B(5pin)<br><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/usbjk/miniab.jpg" alt="miniab.jpg"></p><h3 id="mini-b-10pin">Mini-B 10pin<a title="#mini-b-10pin" href="#mini-b-10pin"></a></h3><p>Mini-B 10pin是mini家族唯一支持USB 3.2协议，主要用于移动硬盘，算是5pin的魔改版本，外观相似，区别在于内部是双面针脚。现在也销声匿迹了<br>除此之外的Mini USB均只支持USB2.0</p><h2 id="2、-micro接口">2、 Micro接口<a title="#2、-micro接口" href="#2、-micro接口"></a></h2><p>Micro接口2007年发布用于替代Mini。<br><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/usbjk/micro.jpg" alt="micro.jpg"></p><p>2009年2月17日，全球移动通信联盟协会宣布在2012年前将使用Micro-USB作为全球统一的标准充电器规格。<br>首批签署协议的手机厂商包括：诺基亚、LG、摩托罗拉、三星、索尼移动</p><h3 id="2.1、-micro-a、micro-b">2.1、 Micro-A、Micro-B<a title="#2.1、-micro-a、micro-b" href="#2.1、-micro-a、micro-b"></a></h3><p>Micro-A仅支持USB 2.0，现已经淘汰，不再使用<br>Micro-B 2.0也就是大家口头上说的“安卓口”（诺基亚作为首批签推广协议的厂商，听到这个词肯定气得发抖）</p><h4 id="2.1.1、-micro-b-3.2">2.1.1、 Micro-B 3.2<a title="#2.1.1、-micro-b-3.2" href="#2.1.1、-micro-b-3.2"></a></h4><p>Micro-B 3.2的接口现在普遍用在移动硬盘盒上，且Micro-B 2.0的插头可以插在Micro B 3.2的母座上用<br><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/usbjk/microbs.jpg" alt="microbs.jpg"></p><h3 id="2.2、-micro-ab">2.2、 Micro-AB<a title="#2.2、-micro-ab" href="#2.2、-micro-ab"></a></h3><p>Micro和Mini一样，也有一种万能母座，叫Micro-AB，同时兼容Micro-A和Micro-B(2.0)<br><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/usbjk/microab.jpg" alt="microab.jpg"></p><h2 id="3、-标准usb接口">3、 标准USB接口<a title="#3、-标准usb接口" href="#3、-标准usb接口"></a></h2><p>USB发展到今天，Mini、Micro已经逐渐不能满足需要了，标准USB接口便应运而生<br><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/usbjk/type.jpg" alt="type.jpg"></p><h3 id="3.1、-type-a、type-b">3.1、 Type-A、Type-B<a title="#3.1、-type-a、type-b" href="#3.1、-type-a、type-b"></a></h3><p>我们说Type-A、Type-B时默认指的是“标准 Type-A”、“标准Type-B”<br>Type-A分2.0和3.2两种，2.0便是我们常见数据线较大的一方。<br>Type-A 3.2的接口是在2.0的基础上，在里面加了5个针脚，所以当3.2接口插的比较浅时，会以2.0模式运行（非正常操作）</p><p>Type-B接口主要用在扫描仪、打印机、外置光驱盒等，毕竟它是“标准”接口，而不是Mini、Micro这行小型化接口，所以我们在便携数码设备上看不到这个接口，自然大部分人接触得比较少啦</p><h3 id="3.2、-type-c">3.2、 Type-C<a title="#3.2、-type-c" href="#3.2、-type-c"></a></h3><p>前面说了，USB类型有A、B两种，分别用于主机和设备，而Type-C的推出便改变了这项标准。<br>Type-C既是A型也是B型，也可以说它既不是A型也不是B型，应为它可以同时应用在主机和设备上，因此命名为Type-C。</p><blockquote><p>本文原作者：<a href="https://www.coolapk.com/feed/17760926?shareKey=YjQyMDhmMzZiMzVlNWVjMGFmYWI~" target="_blank">@FelixCHN</a><br>有删改，已经原作者授权</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;USB协议推出的20多年间，出现了三大类，十数种不同的USB接口。本文就来说一下这些数量繁多的USB接口。&lt;/p&gt;</summary>
    
    
    
    <category term="瞎折腾" scheme="https://blog.zr.ci/categories/xzt/"/>
    
    
    <category term="USB" scheme="https://blog.zr.ci/tags/USB/"/>
    
  </entry>
  
  <entry>
    <title>利用Cloudflare Workers 制作Google镜像站</title>
    <link href="https://blog.zr.ci/posts/cwgi.html"/>
    <id>https://blog.zr.ci/posts/cwgi.html</id>
    <published>2020-05-01T14:11:00.000Z</published>
    <updated>2020-05-01T14:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在gayhub上面闲逛，发现了一个利用Cloudflare Workers 制作Google镜像站的方法。</p><a id="more"></a><p>Cloudflare Workers是什么各位可以自行搜索，这里不做过多介绍。</p><h2 id="新建-workers">新建 Workers<a title="#新建-workers" href="#新建-workers"></a></h2><h3 id="登陆cf之后点击-workers">登陆cf之后点击 Workers<a title="#登陆cf之后点击-workers" href="#登陆cf之后点击-workers"></a></h3><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/cwgi/xjcw.jpg" alt="xjcw" class="φcx"></p><h3 id="创建子域名">创建子域名<a title="#创建子域名" href="#创建子域名"></a></h3><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/cwgi/xjzym.jpg" alt="xjzym" class="φcx"></p><h3 id="点击创建-workers">点击创建 Workers<a title="#点击创建-workers" href="#点击创建-workers"></a></h3><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/cwgi/cjcw.jpg" alt="cjcw" class="φcx"></p><h2 id="部署代码">部署代码<a title="#部署代码" href="#部署代码"></a></h2><h3 id="编辑workers">编辑Workers<a title="#编辑workers" href="#编辑workers"></a></h3><p>将以下代码粘贴至代码框</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Website you intended to retrieve for users.</span></span><br><span class="line"><span class="keyword">const</span> upstream = <span class="string">&#x27;www.google.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Custom pathname for the upstream website.</span></span><br><span class="line"><span class="keyword">const</span> upstream_path = <span class="string">&#x27;/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Website you intended to retrieve for users using mobile devices.</span></span><br><span class="line"><span class="keyword">const</span> upstream_mobile = <span class="string">&#x27;www.google.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Countries and regions where you wish to suspend your service.</span></span><br><span class="line"><span class="keyword">const</span> blocked_region = [<span class="string">&#x27;KP&#x27;</span>, <span class="string">&#x27;SY&#x27;</span>, <span class="string">&#x27;PK&#x27;</span>, <span class="string">&#x27;CU&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// IP addresses which you wish to block from using your service.</span></span><br><span class="line"><span class="keyword">const</span> blocked_ip_address = [<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="string">&#x27;127.0.0.1&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// Whether to use HTTPS protocol for upstream address.</span></span><br><span class="line"><span class="keyword">const</span> https = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Whether to disable cache.</span></span><br><span class="line"><span class="keyword">const</span> disable_cache = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Replace texts.</span></span><br><span class="line"><span class="keyword">const</span> replace_dict = &#123;</span><br><span class="line">    <span class="string">&#x27;$upstream&#x27;</span>: <span class="string">&#x27;$custom_domain&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;//google.com&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addEventListener(<span class="string">&#x27;fetch&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">    event.respondWith(fetchAndApply(event.request));</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchAndApply</span>(<span class="params">request</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> region = request.headers.get(<span class="string">&#x27;cf-ipcountry&#x27;</span>).toUpperCase();</span><br><span class="line">    <span class="keyword">const</span> ip_address = request.headers.get(<span class="string">&#x27;cf-connecting-ip&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> user_agent = request.headers.get(<span class="string">&#x27;user-agent&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> response = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> url = <span class="keyword">new</span> URL(request.url);</span><br><span class="line">    <span class="keyword">let</span> url_hostname = url.hostname;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (https == <span class="literal">true</span>) &#123;</span><br><span class="line">        url.protocol = <span class="string">&#x27;https:&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        url.protocol = <span class="string">&#x27;http:&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">await</span> device_status(user_agent)) &#123;</span><br><span class="line">        <span class="keyword">var</span> upstream_domain = upstream;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> upstream_domain = upstream_mobile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    url.host = upstream_domain;</span><br><span class="line">    <span class="keyword">if</span> (url.pathname == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">        url.pathname = upstream_path;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        url.pathname = upstream_path + url.pathname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (blocked_region.includes(region)) &#123;</span><br><span class="line">        response = <span class="keyword">new</span> Response(<span class="string">&#x27;Access denied: WorkersProxy is not available in your region yet.&#x27;</span>, &#123;</span><br><span class="line">            status: <span class="number">403</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (blocked_ip_address.includes(ip_address)) &#123;</span><br><span class="line">        response = <span class="keyword">new</span> Response(<span class="string">&#x27;Access denied: Your IP address is blocked by WorkersProxy.&#x27;</span>, &#123;</span><br><span class="line">            status: <span class="number">403</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> method = request.method;</span><br><span class="line">        <span class="keyword">let</span> request_headers = request.headers;</span><br><span class="line">        <span class="keyword">let</span> new_request_headers = <span class="keyword">new</span> Headers(request_headers);</span><br><span class="line"></span><br><span class="line">        new_request_headers.set(<span class="string">&#x27;Host&#x27;</span>, url.hostname);</span><br><span class="line">        new_request_headers.set(<span class="string">&#x27;Referer&#x27;</span>, url.hostname);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> original_response = <span class="keyword">await</span> fetch(url.href, &#123;</span><br><span class="line">            method: method,</span><br><span class="line">            headers: new_request_headers</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> original_response_clone = original_response.clone();</span><br><span class="line">        <span class="keyword">let</span> original_text = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">let</span> response_headers = original_response.headers;</span><br><span class="line">        <span class="keyword">let</span> new_response_headers = <span class="keyword">new</span> Headers(response_headers);</span><br><span class="line">        <span class="keyword">let</span> status = original_response.status;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (disable_cache) &#123;</span><br><span class="line">            new_response_headers.set(<span class="string">&#x27;Cache-Control&#x27;</span>, <span class="string">&#x27;no-store&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        new_response_headers.set(<span class="string">&#x27;access-control-allow-origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">        new_response_headers.set(<span class="string">&#x27;access-control-allow-credentials&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">        new_response_headers.delete(<span class="string">&#x27;content-security-policy&#x27;</span>);</span><br><span class="line">        new_response_headers.delete(<span class="string">&#x27;content-security-policy-report-only&#x27;</span>);</span><br><span class="line">        new_response_headers.delete(<span class="string">&#x27;clear-site-data&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(new_response_headers.get(<span class="string">&quot;x-pjax-url&quot;</span>)) &#123;</span><br><span class="line">            new_response_headers.set(<span class="string">&quot;x-pjax-url&quot;</span>, response_headers.get(<span class="string">&quot;x-pjax-url&quot;</span>).replace(<span class="string">&quot;//&quot;</span> + upstream_domain, <span class="string">&quot;//&quot;</span> + url_hostname));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">const</span> content_type = new_response_headers.get(<span class="string">&#x27;content-type&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (content_type.includes(<span class="string">&#x27;text/html&#x27;</span>) &amp;&amp; content_type.includes(<span class="string">&#x27;UTF-8&#x27;</span>)) &#123;</span><br><span class="line">            original_text = <span class="keyword">await</span> replace_response_text(original_response_clone, upstream_domain, url_hostname);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            original_text = original_response_clone.body</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        response = <span class="keyword">new</span> Response(original_text, &#123;</span><br><span class="line">            status,</span><br><span class="line">            headers: new_response_headers</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">replace_response_text</span>(<span class="params">response, upstream_domain, host_name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> text = <span class="keyword">await</span> response.text()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> replace_dict) &#123;</span><br><span class="line">        j = replace_dict[i]</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="string">&#x27;$upstream&#x27;</span>) &#123;</span><br><span class="line">            i = upstream_domain</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="string">&#x27;$custom_domain&#x27;</span>) &#123;</span><br><span class="line">            i = host_name</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (j == <span class="string">&#x27;$upstream&#x27;</span>) &#123;</span><br><span class="line">            j = upstream_domain</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="string">&#x27;$custom_domain&#x27;</span>) &#123;</span><br><span class="line">            j = host_name</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(i, <span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">        text = text.replace(re, j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> text;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">device_status</span>(<span class="params">user_agent_info</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> agents = [<span class="string">&quot;Android&quot;</span>, <span class="string">&quot;iPhone&quot;</span>, <span class="string">&quot;SymbianOS&quot;</span>, <span class="string">&quot;Windows Phone&quot;</span>, <span class="string">&quot;iPad&quot;</span>, <span class="string">&quot;iPod&quot;</span>];</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> v = <span class="number">0</span>; v &lt; agents.length; v++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (user_agent_info.indexOf(agents[v]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击左上角修改项目名（可选）<br>点击右下角保存并部署</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/cwgi/xgdm.jpg" alt="xgdm" class="φcx"></p><p>确认部署</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/cwgi/bs.jpg" alt="bs" class="φcx"></p><p>点击预览查看</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/cwgi/yl.jpg" alt="yl" class="φcx"></p><h2 id="绑定域名">绑定域名<a title="#绑定域名" href="#绑定域名"></a></h2><h3 id="添加路由">添加路由<a title="#添加路由" href="#添加路由"></a></h3><p>回到域名管理，选择你的域名</p><p>点击Workers，点击添加路由</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/cwgi/ly.jpg" alt="ly" class="φcx"></p><p>路由填写你需要解析的域名，Workers选择刚刚新建的Workers项目名<br>我这里以<code>gogoogle.ml</code>举例，注意在域名后面填写<code>/*</code></p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/cwgi/qr.jpg" alt="qr" class="φcx"></p><h3 id="添加解析">添加解析<a title="#添加解析" href="#添加解析"></a></h3><p>这个是可以随便填写的，无论你写的什么，cf都会绑定到Workers上面</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/cwgi/jx.jpg" alt="jx" class="φcx"></p><h2 id="预览">预览<a title="#预览" href="#预览"></a></h2><p>!!!</p><center>[btnyellow href="http://gogoogle.ml/" target="blank"]点击预览[/btnyellow]</center>!!!]]></content>
    
    
    <summary type="html">&lt;p&gt;今天在gayhub上面闲逛，发现了一个利用Cloudflare Workers 制作Google镜像站的方法。&lt;/p&gt;</summary>
    
    
    
    <category term="瞎折腾" scheme="https://blog.zr.ci/categories/xzt/"/>
    
    
    <category term="web" scheme="https://blog.zr.ci/tags/web/"/>
    
    <category term="Workers" scheme="https://blog.zr.ci/tags/Workers/"/>
    
  </entry>
  
  <entry>
    <title>盘点一下那些我用过的免费CDN</title>
    <link href="https://blog.zr.ci/posts/freecdn.html"/>
    <id>https://blog.zr.ci/posts/freecdn.html</id>
    <published>2020-04-16T16:12:00.000Z</published>
    <updated>2020-04-16T16:12:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知，箴扰是个的穷孩纸，没得一丢丢小钱钱，又想给网站套个CDN，加快一下访问速度，于是就有了这篇文章。</p><a id="more"></a><blockquote><h2 id="cdn是什么？">CDN是什么？<a title="#cdn是什么？" href="#cdn是什么？"></a></h2><p>CDN的全称是Content Delivery Network，即内容分发网络。依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。</p></blockquote><p>好的，现在进入正题盘点一下我用过的可以白嫖的CDN，这里因为某些原因我会分为两个区。</p><h2 id="备案区">备案区<a title="#备案区" href="#备案区"></a></h2><p>域名备案了的话是会方便不少的，本人的备案注销了QWQ。</p><h3 id="一、又拍云">一、又拍云<a title="#一、又拍云" href="#一、又拍云"></a></h3><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/freecdn/yp.jpg" alt="yp" class="φcx"></p><p>相信很多人都对又拍云有所耳闻，只需要在网页底部加入又拍云的logo，即可申请加入又拍云联盟，之后每月可以享有<strong>15G</strong> CDN流量，支持<strong>http/https</strong>访问，速度不错国内一片绿。</p><p>链接：<a href="https://www.upyun.com/" target="_blank">https://www.upyun.com/</a></p><h3 id="二、七牛云">二、七牛云<a title="#二、七牛云" href="#二、七牛云"></a></h3><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/freecdn/qn.jpg" alt="qn" class="φcx"></p><p>七牛云也是国内老牌的商家了，七牛云的开发者计划提供了每月国内及海外分别<strong>10G</strong> CDN流量，但是仅针对<strong>http</strong>请求免费，https需要额外付费，不过价格十分优惠，且可以通过邀请好友来提升免费额度。</p><p>链接： <a href="https://www.qiniu.com/" target="_blank">https://www.qiniu.com/</a></p><h3 id="三、腾讯云">三、腾讯云<a title="#三、腾讯云" href="#三、腾讯云"></a></h3><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/freecdn/tx.jpg" alt="tx" class="φcx"></p><p>腾讯云针对新用户会在前六个月每月赠送<strong>50G</strong>流量包，六个月之后每月<strong>10G</strong>流量，本人在使用的时候发现对电信网络访问有一丢丢不友好，当然，也可能是我配置问题。</p><p>链接：<a href="https://cloud.tencent.com/product/cdn" target="_blank">https://cloud.tencent.com/product/cdn</a></p><h3 id="四、百度云">四、百度云<a title="#四、百度云" href="#四、百度云"></a></h3><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/freecdn/bd.jpg" alt="bd" class="φcx"></p><p>百度云加速免费用户每天可用<strong>10G</strong>流量，并且按官网说法对百度搜索有SEO优化，可以加快百度收录速度，免费用户会分配8个国内节点和2个国外节点，总体来说还算不错。</p><p>链接：<a href="https://su.baidu.com/" target="_blank">https://su.baidu.com/</a></p><h3 id="五、猫云">五、猫云<a title="#五、猫云" href="#五、猫云"></a></h3><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/freecdn/my.jpg" alt="my" class="φcx"></p><p>猫云算是个新秀，推出的猫云联盟和又拍云联盟类似，需要在网站底部加上猫云logo，每月赠送<strong>30G</strong> CDN流量，访问速度也算不错。</p><p>链接：<a href="https://www.maoyuncloud.com/" target="_blank">https://www.maoyuncloud.com/</a></p><h2 id="自由区">自由区<a title="#自由区" href="#自由区"></a></h2><p>下面的这些都无需备案，自由发育(ಡωಡ)</p><h3 id="1.cloudflare">1.Cloudflare<a title="#1.cloudflare" href="#1.cloudflare"></a></h3><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/freecdn/cf.jpg" alt="cf" class="φcx"></p><p>cf可以说是霸主级别的存在，没得流量限制，免费用户可以通过cfp自选IP及分区域解析来实现访问速度的优化，不过这需要一点点耐心。</p><p>链接：<a href="https://www.cloudflare.com/" target="_blank">https://www.cloudflare.com/</a></p><h3 id="2.nodecache">2.Nodecache<a title="#2.nodecache" href="#2.nodecache"></a></h3><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/freecdn/nc.jpg" alt="nc" class="φcx"></p><p>新用户赠一个月流量，走aff注册账号享有1t流量和100G中国直连流量，也可以自行注册获得500G流量，这家最近推出了一个中国直连的流量包，速度还算不错。</p><p>链接：<a href="https://console-api.nodecache.com/f?aff=37jNvr" target="_blank">https://www.nodecache.com/</a></p><h3 id="3.ddos-guard">3.DDOS-GUARD<a title="#3.ddos-guard" href="#3.ddos-guard"></a></h3><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/freecdn/dg.jpg" alt="dg" class="φcx"></p><p>这家的CDN貌似不限流量，有香港的节点，速度还说得过去，不过使用ssl需要升级账户才行。</p><p>链接：<a href="https://ddos-guard.net/" target="_blank">https://ddos-guard.net/</a></p><h3 id="4.企鹅小屋">4.企鹅小屋<a title="#4.企鹅小屋" href="#4.企鹅小屋"></a></h3><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/freecdn/qe.jpg" alt="qe" class="φcx"></p><p>企鹅小屋最近公测CDN，可以免费开一年的套餐，限制两个域名，每个月<strong>50G</strong>流量，节点数量和质量还算不错，值得一试(ಡωಡ)</p><p>链接：<a href="http://www.aipky.com/" target="_blank">http://www.aipky.com/</a></p><h3 id="5.其它">5.其它<a title="#5.其它" href="#5.其它"></a></h3><p>上面只说了我使用过的，还有一些我了解但没使用过的，各位可以自行尝试。<br><a href="http://psychz.net">psychz.net</a>  免费50G/月<br><a href="http://netdepot.com">netdepot.com</a> 免费100G/月<br>AWS CLOUDFONT 12个月免费50G</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;众所周知，箴扰是个的穷孩纸，没得一丢丢小钱钱，又想给网站套个CDN，加快一下访问速度，于是就有了这篇文章。&lt;/p&gt;</summary>
    
    
    
    <category term="瞎折腾" scheme="https://blog.zr.ci/categories/xzt/"/>
    
    
    <category term="web" scheme="https://blog.zr.ci/tags/web/"/>
    
    <category term="CDN" scheme="https://blog.zr.ci/tags/CDN/"/>
    
  </entry>
  
  <entry>
    <title>愿逝者安息，愿生者奋发，愿祖国昌盛！</title>
    <link href="https://blog.zr.ci/posts/rip.html"/>
    <id>https://blog.zr.ci/posts/rip.html</id>
    <published>2020-04-04T08:00:00.000Z</published>
    <updated>2020-04-04T08:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>阳历4月4日，阴历三月十二，是庚子年的清明。<br>这个清明节与往常的清明节没什么不同，却也有很大的不同。</p><a id="more"></a><p>请记住这十四个名字：</p><p>王兵、冯效林、江学庆、刘智明、李文亮、张抗美、肖俊、吴涌、柳帆、夏思思、黄文军、梅仲明、彭银华、廖建军。</p><p>他们是牺牲在防疫情防控一线的首批烈士。此时此刻，心中唯有无尽的感激。</p><p>另外，说一个火神山的不完全建设手册：首先，需要一个紧急命令，在5万平方米的坡地上指挥7500人向全体国人立下一个军令状：10天，建成一所1000张床位的救命医院。</p><p>接着，需要设计研究院在78分钟之内将17年前的小汤山图纸全部整理完毕，24小时内出设计图，60小时之内敲定施工图稿。</p><p>接下来，需要国家电网260多名员工不眼不休，24小时连续工作，完成8000米电力电缆铺设，需要华为、中国移动、中国联通、中国电信、中国电子、中国信科、中国铁塔等前后方企业紧密配合，在36小时内完成5G信号覆盖，交付云资源，并且建成与解放军总医院的远程会诊系统。</p><p>而完成了这些之后，才仅仅可以开始动工。</p><p>所谓的中国速度，不过是一个个朴实善良的劳动者，一个个不畏生死的医护人员，一点一滴积累出来的。</p><p>除此之外，只怕还有一个更重要的原因，是让其他国家想抄作业都抄不好的原因之所在：援鄂医疗队加当地医护总共17万人，每人每天补助200元，一天就是3400万。</p><p>每套防护服成本至少300元，就算医护人员不吃不喝不上厕所不睡觉，计算下来每人至少需要十几套，成本超过五亿。</p><p>重症患者每人几十万元，全国确诊几万例，再加上雷神山、火神山、方舱医院，各地封城封路，每天的抗疫消耗几乎相当于一场中等烈度的战争。</p><p>就在奔驰喊着日亏4亿的时候，比亚迪和五菱已经开始造起了口罩。当国外还在要求自由集会的时候，中国的十四亿人已经自觉的窝在了家里。</p><p>在各国关心的大多是“经济”、“股市”的时候，只有投入已经超过1169亿的中国对钱只字未提，只提生命。</p><p>我不知道那些想跑步，想喝矿泉水的人到底在想什么。</p><p>但是我知道，现在的太平，是烈士用生命换来的，是国家，还有全国人民共同的付出换来的。</p><p>也请诸君共同感恩烈士，缅怀烈士，共同守护先贤和烈士们用生命才换来的太平。</p><p>其实我并不喜欢烈士这个称号，因为这个称号往往意味着牺牲。</p><p><strong>太平本是烈士定，烈士何曾享太平？</strong></p><p><strong>愿逝者安息，愿生者奋发，愿祖国昌盛！</strong></p><p>以上。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;阳历4月4日，阴历三月十二，是庚子年的清明。&lt;br&gt;
这个清明节与往常的清明节没什么不同，却也有很大的不同。&lt;/p&gt;</summary>
    
    
    
    <category term="碎碎念" scheme="https://blog.zr.ci/categories/ssn/"/>
    
    
    <category term="R.I.P." scheme="https://blog.zr.ci/tags/R-I-P/"/>
    
  </entry>
  
  <entry>
    <title>Android使用 Termux 搭建web服务并实现外网访问</title>
    <link href="https://blog.zr.ci/posts/acmp.html"/>
    <id>https://blog.zr.ci/posts/acmp.html</id>
    <published>2020-04-03T14:11:00.000Z</published>
    <updated>2020-04-03T14:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>相信各位家里面应该都有闲置的Android设备，反正也是闲置，不如利用起来搭建一个小网站。</p><a id="more"></a><p><strong>文章已失效，仅供参考</strong></p><h2 id="前言">前言<a title="#前言" href="#前言"></a></h2><p>termux是什么：</p><blockquote><p>Termux是一个Android下一个高级的终端模拟器, 开源且不需要root, 支持apt管理软件包，十分方便安装软件包, 完美支持Python, PHP, Ruby, Go, Nodejs, MySQL等。</p></blockquote><h2 id="一、优化termux使用">一、优化termux使用<a title="#一、优化termux使用" href="#一、优化termux使用"></a></h2><p>因为一些原因，termux自带的软件源在国内的速度并不理想，所以我们先使用以下命令修改为清华大学提供的软件源。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#x27;s@^\(deb.*stable main\)$@#\1\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/termux-packages-24 stable main@&#x27; $PREFIX/etc/apt/sources.list</span><br><span class="line">sed -i &#x27;s@^\(deb.*games stable\)$@#\1\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/game-packages-24 games stable@&#x27; $PREFIX/etc/apt/sources.list.d/game.list</span><br><span class="line">sed -i &#x27;s@^\(deb.*science stable\)$@#\1\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/science-packages-24 science stable@&#x27; $PREFIX/etc/apt/sources.list.d/science.list</span><br><span class="line">pkg up</span><br></pre></td></tr></table></figure><p>输入： <code>termux-setup-storage</code> 获取并授予存储权限</p><p>输入以下内容修复快捷键：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;extra-keys = [[&#x27;ESC&#x27;,&#x27;TAB&#x27;,&#x27;CTRL&#x27;,&#x27;ALT&#x27;,&#x27;-&#x27;,&#x27;/&#x27;,&#x27;~&#x27;,&#x27;:&#x27;,&#x27;;&#x27;],[&#x27;[&#x27;,&#x27;!&#x27;,&#x27;PGUP&#x27;,&#x27;HOME&#x27;,&#x27;UP&#x27;,&#x27;END&#x27;,&#x27;PGDN&#x27;,&#x27;\&quot;&#x27;,&#x27;]&#x27;],[&#x27;&#123;&#x27;,&#x27;&lt;&#x27;,&#x27;(&#x27;,&#x27;LEFT&#x27;,&#x27;DOWN&#x27;,&#x27;RIGHT&#x27;,&#x27;)&#x27;,&#x27;&gt;&#x27;,&#x27;&#125;&#x27;]]&quot; &gt;&gt; ~/.termux/termux.properties</span><br></pre></td></tr></table></figure><p>可选操作：</p><p>安装zsh：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://gitee.com/idkzr/termux-ohmyzsh/raw/master/install.sh)&quot;</span><br></pre></td></tr></table></figure><h2 id="二、安装caddy-mariadb-php">二、安装Caddy MariaDB PHP<a title="#二、安装caddy-mariadb-php" href="#二、安装caddy-mariadb-php"></a></h2><p>Caddy是一个易于使用的通用web服务器。</p><p>MariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可 MariaDB的目的是完全兼容MySQL，包括API和命令行，使之能轻松成为MySQL的代替品。</p><p>使用 <code>bash &lt;(curl https://idkzr.com/shell/acmp.sh)</code>即可一键安装</p><p>什么？不想使用一键命令？</p><p>在Termux中依次执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pkg i wget vim mariadb php php-fpm -y</span><br><span class="line"></span><br><span class="line">curl https://getcaddy.com | bash -s personal</span><br></pre></td></tr></table></figure><h2 id="三、配置mysql数据库">三、配置MySql数据库<a title="#三、配置mysql数据库" href="#三、配置mysql数据库"></a></h2><p>输入 <code>mysqld</code> 启动数据库，启动完成后,这个会话就一直存活,类似与debug调试一样,只有新建会话才可以操作。</p><p>新建一个termux会话</p><p>输入<code>mysql</code>直接进入mariadb数据库，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set password for &quot;root&quot;@&quot;localhost&quot; &#x3D; password(&quot;123456789&quot;)</span><br></pre></td></tr></table></figure><p>将123456789修改为你要使用的密码</p><p>输入一下<code>mysql_secure_installation</code>进入快速设置向导，输入当前密码既可。</p><p>下面根据个人偏好来进行设置,没有绝对的要求</p><p>Set root password? [Y/n] n#是否设置新的root密码</p><p>Remove anonymous users? [Y/n] Y#是否移除匿名用户</p><p>Disallow root login remotely? [Y/n] n#是否不允许root远程登录</p><p>Removetestdatabase and access to it? [Y/n] n#是否移除test数据库</p><p>Reload privilege tables now? [Y/n] y#是否重新加载表的权限</p><h2 id="四、配置php-fpm">四、配置PHP-fpm<a title="#四、配置php-fpm" href="#四、配置php-fpm"></a></h2><p>输入<code>vim ../usr/etc/php-fpm.d/www.conf</code><br>找到：<code>listen = /data/data/com.termux/files/usr/var/run/php-fpm.sock</code><br>修改为：<code>127.0.0.1:9000</code><br>保存并退出<br>输入 <code>php-fpm</code> 启动PHP</p><h2 id="五、配置typecho">五、配置Typecho<a title="#五、配置typecho" href="#五、配置typecho"></a></h2><p>在内置存储新建一个 <code>www</code> 文件夹<br>使用<code>ln -s /data/data/com.termux/files/home/storage/shared/www www</code>将文件夹软连接到termux工作目录<br>将typecho程序解压到内置存储 www 文件夹中</p><p>输入 <code>caddy</code>启动web服务</p><h2 id="六、配置frp">六、配置frp<a title="#六、配置frp" href="#六、配置frp"></a></h2><p>新建一个termux会话<br>输入下方命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下载frpc二进制文件</span></span><br><span class="line"></span><br><span class="line">mkdir frp &amp;&amp; cd frp &amp;&amp; wget https://qianqu.me/frp/frpc_linux_arm64 -O frpc &amp;&amp; chmod +x frpc</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">创建配置文件</span></span><br><span class="line"></span><br><span class="line">touch frpc.ini &amp;&amp; chmod +x frpc.ini</span><br><span class="line"></span><br><span class="line">vim frpc.ini</span><br></pre></td></tr></table></figure><p>将配置文件粘贴到frpc.ini中<br>输入./frpc启动frp</p><h2 id="end">END<a title="#end" href="#end"></a></h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;相信各位家里面应该都有闲置的Android设备，反正也是闲置，不如利用起来搭建一个小网站。&lt;/p&gt;</summary>
    
    
    
    <category term="瞎折腾" scheme="https://blog.zr.ci/categories/xzt/"/>
    
    
    <category term="Termux" scheme="https://blog.zr.ci/tags/Termux/"/>
    
    <category term="web" scheme="https://blog.zr.ci/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>可能是Windows上最强的开源任务管理器：Process Hacker</title>
    <link href="https://blog.zr.ci/posts/process-hacker.html"/>
    <id>https://blog.zr.ci/posts/process-hacker.html</id>
    <published>2020-03-03T14:11:00.000Z</published>
    <updated>2020-03-03T14:21:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>※建议从头读到尾流畅阅读。分块阅读将损失体验。</strong></p><p>稍微会玩点 Windows 的用户，都跟内置的任务管理器打过交道。</p><p>当然，今天不讲任务管理器，虽然经过微软百代改进，任务管理器变得更加人性化，界面更加好看，但是除此之外一无是处，真的是个彻头彻尾的垃圾。</p><a id="more"></a><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/processhacker/ph01.jpg" alt="ph01.jpg"><br>前些日子，V2EX 上有人说 TIM 电脑版会扫描硬盘，这个我还是第一次知道，就用 <code>Process Hacker</code> 挂着看，没遇到问题，就只是告诉了我曾经的同学。正好几天前，同学截图，TIM 的子进程 Q 盾 开始读磁盘，比较卡，我就向他推荐 <code>Process Hacker</code> 看看腾讯到底在扫什么东西。最终他并没有安装。</p><p>但很明显，任务管理器毛都看不出来 TIM 在读写什么。那么，有什么好点的任务管理器，能看到程序实时的读写情况？<br><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/processhacker/ph02.jpg" alt="ph02.jpg"></p><p>如图所见，Process Hacker 2 是任务管理器的替代。</p><p>您可以在 <a href="https://processhacker.sourceforge.io/">https://processhacker.sourceforge.io/</a> 上下载它，它是 100% 开源，并且前几天还更新了的。具体可以下载源码自己编译一下。Release 是较早版本，够用，适用于大众的。</p><p>GitHub: <a href="https://github.com/processhacker">https://github.com/processhacker</a></p><p>这种垃圾又复古，又是彩虹色的一条条的界面，真的损第一印象。我刚做完程序界面，为啥会推荐这个程序？因为这个“颜色”，是有深意的。</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/processhacker/ph03.jpg" alt="ph03.jpg" class="φcx"></p><p>当我关闭了一个应用程序后，这个任务管理器并不像 Taskmgr.exe，直接把这个进程剔除，而是显示红色并残留数秒，供你参考。</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/processhacker/ph04.jpg" alt="ph04.jpg" class="φcx"></p><p>在选项里可以更改这些设置，比如更改高亮时间、新建进程的颜色与被结束进程的颜色。同时，别的色彩会标亮特殊进程，更好区分。</p><p>好，这个看上去也就一小功能啊，界面就这点改进还没汉化，为什么骗我下这个？</p><p>这里举个例子，我用 Bittorrent 下一个 BDRip，连到一个垃圾迅雷，就硬吸我血，上传猛增，下载没有，还屏蔽不了。不为这个人专门开防火墙，也不换程序的话，看样子很难解决了。</p><p>当然不是。</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/processhacker/ph05.jpg" alt="ph05.jpg" class="φcx"></p><p>只要知道对方的 IP 地址，就是手到擒来，不说关闭通讯录，想干嘛就干嘛。</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/processhacker/ph06.jpg" alt="ph06.jpg" class="φcx"></p><p>同样，腾讯 Q 盾也是不堪一击的，扫盘程序在扫描什么，都可以马上知道，不过这里还是推荐大家用沙盒安装国产程序。</p><p>当然，Taskmgr.exe 是不允许你禁用 CPU 0 的，但是 Process Hacker 可以拒绝程序使用所有 CPU。</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/processhacker/ph07.jpg" alt="ph07.jpg" class="φcx"></p><p>说到占用，就不得不提现在 Taskmgr.exe 做的很好的“性能”对话框。那么在 Process Hacker 上面是怎么样的呢，一起看一下。</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/processhacker/ph08.jpg" alt="ph08.jpg"><br><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/processhacker/ph09.jpg" alt="ph09.jpg"></p><p>如图，Process Hacker 完全舍弃了美观来做硬核之事。右边也可以看出，鼠标指针悬浮在上面就可以看到针对进程的占用量统计，而不是整一个的。这样更加明细。</p><p>然后，如迅雷、百度云、aria2 这类下载应用，在你迅速拔下网线的时候，从几 M 开始，速度一直下到 1M，再下到 KB，最后短则几秒，长则十几秒的延迟，到底为什么会出现？这是因为套了个算法，而 Process Hacker 和 Taskmgr.exe 是绝对的实时，网线一拔直接归零。</p><p>另外，从图中也能轻松看出，全部是采用 MB/s 单位显示，非常实用。</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/processhacker/ph10.jpg" alt="ph10.jpg" class="φcx"></p><p>所有操作选项</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/processhacker/ph11.jpg" alt="ph11.jpg" class="φcx"></p><p>这里还有一些优秀功能，这里也一并介绍。下图是它的小托盘，左下角可以更改其监测内容，以占用率高低排序。</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/processhacker/ph12.jpg" alt="ph12.jpg" class="φcx"></p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/processhacker/ph13.jpg" alt="ph13.jpg" class="φcx"></p><p>这个功能真的非常到位。有时候进程开太多，又搜索不到，比如 Chrome 怎么办？</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/processhacker/ph15.jpg" alt="ph15.jpg" class="φcx"></p><p>Find Window 功能可以精确到进程中的每一个控件，长按图标然后鼠标拖动到你要监测的窗口里，马上就会帮你找到进程。右侧 X 图标是拖动后结束进程的意思，当软件无响应时，你不需要去 Taskmgr.exe 那里找无响应进程并结束（并且还有些许延迟）。直接一拖就能结束。</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/processhacker/ph14.jpg" alt="ph14.jpg" class="φcx"></p><p>当然在属性窗口中还有诸多小插件（Plugin），比如 Comment 选项卡，能快速标记某个进程，重启也会保留此内容。还有，进程高亮功能也能是你快速在众多进程中找到那个该死的进程（Need-to-kill）。</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/processhacker/ph16.jpg" alt="ph16.jpg" class="φcx"></p><p>选项卡一览</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/processhacker/ph17.jpg" alt="ph17.jpg" class="φcx"></p><p>状态一览</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/processhacker/ph18.jpg" alt="ph18.jpg" class="φcx"></p><p>我们看一下 Environment。</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/processhacker/ph19.jpg" alt="ph19.jpg" class="φcx"></p><p>稍微会点电脑的编程中级高手都知道，这个 Environment 指的是系统全局变量或为环境。装过 Java 开发者多多少少都沾点过。通过这里，我们能欺骗程序或者作为伪沙盒，下面就是一个示例。</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/processhacker/ph20.jpg" alt="ph20.jpg" class="φcx"></p><p>好，我们看看 Thread 选项卡。</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/processhacker/ph21.jpg" alt="ph21.jpg" class="φcx"></p><p>很显而易见了。这里专门锁定这个程序的进程，并提供更详细的调试信息。</p><p>在很多的调试软件中，内存是必不可少的。这个当然也是。</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/processhacker/ph22.jpg" alt="ph22.jpg" class="φcx"></p><p>还有很多实用的功能，这里就不一一列举了。当然，还有很多你可能用的到底功能，比如删除与添加服务（Service），我这里不再一一赘述了。既然你都看到了这里，也最好坚持看完吧，说不定你真的需要呢</p><p>添加服务</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/processhacker/ph23.jpg" alt="ph23.jpg" class="φcx"></p><p>删除服务（有些服务真的用不到但是卸载不删，比如这个以及 Flash 中国版，Windows 服务里面删不掉，360 等虽然可以但是不推荐安装）</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/processhacker/ph24.jpg" alt="ph24.jpg" class="φcx"></p><p>然后是非常非常非常非常非常有用的东西，进程上传到反病毒网站，快速检测危险。</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/processhacker/ph25.jpg" alt="ph25.jpg" class="φcx"></p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/processhacker/ph26.jpg" alt="ph26.jpg" class="φcx"></p><p>如果你心动了，这里还提供一个功能，干掉 Windows 任务管理器 Taskmgr.exe，并以 Process Hacker 替代。当然，想用任务管理器的时候，Process Hacker 里面也是能够调用打开任务管理器的。所以可以放心用。</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/processhacker/ph27.jpg" alt="ph27.jpg" class="φcx"></p><p>那么这就是图文的全部了。如果你是开发者，我认为这个软件是你不得不装的 - 除非你是浑水摸鱼或者经常摸鱼。</p><p>哦对了，你不喜欢微软雅黑？那爱什么字体换什么换什么字体，比如下面的。</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/processhacker/ph28.jpg" alt="ph28.jpg" class="φcx"></p><blockquote><p>本文转自酷安<a href="https://www.coolapk.com/feed/16922771?shareKey=MzUyNTBhYjEwNjBlNWU1ZGRmMjU~&amp;shareUid=2969102" target="_blank">@FlyfishMoe233</a><br>已经原作者授权</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;※建议从头读到尾流畅阅读。分块阅读将损失体验。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;稍微会玩点 Windows 的用户，都跟内置的任务管理器打过交道。&lt;/p&gt;
&lt;p&gt;当然，今天不讲任务管理器，虽然经过微软百代改进，任务管理器变得更加人性化，界面更加好看，但是除此之外一无是处，真的是个彻头彻尾的垃圾。&lt;/p&gt;</summary>
    
    
    
    <category term="瞎折腾" scheme="https://blog.zr.ci/categories/xzt/"/>
    
    
    <category term="Windows" scheme="https://blog.zr.ci/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Termux基础美化-zsh</title>
    <link href="https://blog.zr.ci/posts/termux-zsh.html"/>
    <id>https://blog.zr.ci/posts/termux-zsh.html</id>
    <published>2020-02-22T13:11:00.000Z</published>
    <updated>2020-02-22T13:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>看见别人的termux界面辣么漂亮，而自己的却是乌漆麻黑的，是不是很有差距？</p><p>教你使用zsh代替bash作为默认shell</p><a id="more"></a><p>直接使用一键安装脚本安装</p><p>方便快捷，一步到位</p><p>复制以下内容粘贴到Termux即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;gitee.com&#x2F;idkzr&#x2F;termux-ohmyzsh&#x2F;raw&#x2F;master&#x2F;install.sh)&quot; </span><br></pre></td></tr></table></figure><p>默认主题为 agnoster ，如需修改主题请编辑 .zshrc 文件</p><p>将第一行 ZSH_THEME=“agnoster” 中双引号内的文字修改为你想使用的主题名称。</p><p>输入zsht可调整字体及配色</p><h2 id="zsht脚本截图："><code>zsht</code>脚本截图：<a title="#zsht脚本截图：" href="#zsht脚本截图："></a></h2><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/termux-zsh/zsht.jpg" alt="zsht.jpg" class="φcx"></p><h2 id="字体截图：">字体截图：<a title="#字体截图：" href="#字体截图："></a></h2><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/termux-zsh/fap.jpg" alt="fap.jpg"><br><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/termux-zsh/fdsmfp.jpg" alt="fdsmfp.jpg"><br><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/termux-zsh/fifp.jpg" alt="fifp.jpg"><br><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/termux-zsh/fir.jpg" alt="fir.jpg"><br><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/termux-zsh/fmfp.jpg" alt="fmfp.jpg"><br><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/termux-zsh/frmfp.jpg" alt="frmfp.jpg"><br><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/termux-zsh/fscpr.jpg" alt="fscpr.jpg"><br><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/termux-zsh/fumdp.jpg" alt="fumdp.jpg"></p><h2 id="配色截图：">配色截图：<a title="#配色截图：" href="#配色截图："></a></h2><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/termux-zsh/caci.jpg" alt="caci.jpg"><br><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/termux-zsh/cflat.jpg" alt="cflat.jpg"><br><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/termux-zsh/cgruvbox.jpg" alt="cgruvbox.jpg"><br><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/termux-zsh/cmaterial.jpg" alt="cmaterial.jpg"><br><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/termux-zsh/cpali.jpg" alt="cpali.jpg"><br><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/termux-zsh/csolarized.jpg" alt="csolarized.jpg"><br><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/termux-zsh/ctango.jpg" alt="ctango.jpg"><br><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/termux-zsh/cura.jpg" alt="cura.jpg"><br><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/termux-zsh/cvag.jpg" alt="cvag.jpg"><br>主题推荐：</p><blockquote><p>本来是截了20个主题的图片的，但是手残，不小心del了，懒得截图了(◔◡◔)</p></blockquote><p>Tips：<br>如果报错请带图反馈！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;看见别人的termux界面辣么漂亮，而自己的却是乌漆麻黑的，是不是很有差距？&lt;/p&gt;
&lt;p&gt;教你使用zsh代替bash作为默认shell&lt;/p&gt;</summary>
    
    
    
    <category term="瞎折腾" scheme="https://blog.zr.ci/categories/xzt/"/>
    
    
    <category term="Termux" scheme="https://blog.zr.ci/tags/Termux/"/>
    
    <category term="zsh" scheme="https://blog.zr.ci/tags/zsh/"/>
    
  </entry>
  
  <entry>
    <title>基于Coding CI实现Hexo的持续集成与Github和Coding的同步部署</title>
    <link href="https://blog.zr.ci/posts/codingci.html"/>
    <id>https://blog.zr.ci/posts/codingci.html</id>
    <published>2020-02-20T16:21:00.000Z</published>
    <updated>2020-10-19T16:21:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>网上关于Hexo持续集成的文章大多是使用Travis CI，也有不少同步部署到Github和Coding的教程，不过Travis只对Github的仓库提供CI服务，由于某些原因，Github在国内的访问速度并不理想，所以采用<a href="https://help.coding.net/docs/devops/ci/introduce.html" target="_blank">Coding CI</a>进行部署。</p><a id="more"></a><blockquote><p>具体流程如下：<br><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/ci.jpg" alt="ci"></p></blockquote><h2 id="什么是持续集成(ci)：">什么是持续集成(CI)：<a title="#什么是持续集成(ci)：" href="#什么是持续集成(ci)："></a></h2><blockquote><p>持续集成（Continuous Integration，简称CI）是一种软件开发实践，在实践中指只要代码有变更，就自动运行构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。</p></blockquote><h2 id="1.获取访问令牌">1.获取访问令牌<a title="#1.获取访问令牌" href="#1.获取访问令牌"></a></h2><p>因为是需要进行双端部署，这里需要分别获取Github和Coding的访问令牌</p><h3 id="1.1-获取coding访问令牌">1.1 获取Coding访问令牌<a title="#1.1-获取coding访问令牌" href="#1.1-获取coding访问令牌"></a></h3><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/tokenc1.jpg" alt="tokenc1" class="φcx"></p><p>如图，点击新建令牌，描述可以随便填写，勾选<code>project:depot</code>的复选框即可。</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/tokenc2.jpg" alt="tokenc2" class="φcx"></p><p>密钥只显示一次，请将获取到的密钥复制保存下来，并以<code>用户名:密钥</code>的方式组合起来。</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/tokenc3.jpg" alt="tokenc3" class="φcx"></p><h3 id="1.2-获取github访问令牌">1.2 获取Github访问令牌<a title="#1.2-获取github访问令牌" href="#1.2-获取github访问令牌"></a></h3><p>点击：<a href="https://github.com/settings/tokens" target="_blank">https://github.com/settings/tokens</a></p><p>申请Github账号令牌</p><p>申请流程和获取Coding令牌差不多</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/tokeng1.jpg" alt="tokeng1" class="φcx"></p><p>名称随意，勾选<code>repo</code>复选框</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/tokeng2.jpg" alt="tokeng2" class="φcx"></p><p>注意保存密钥，并以<code>用户名:密钥</code>的方式组合起来。</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/tokeng3.jpg" alt="tokeng3" class="φcx"></p><h2 id="2.新建仓库">2.新建仓库<a title="#2.新建仓库" href="#2.新建仓库"></a></h2><h3 id="2.1.新建github仓库">2.1.新建GitHub仓库<a title="#2.1.新建github仓库" href="#2.1.新建github仓库"></a></h3><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/gitrepo.jpg" alt="gitrepo" class="φcx"></p><h3 id="2.2.新建coding项目">2.2.新建Coding项目<a title="#2.2.新建coding项目" href="#2.2.新建coding项目"></a></h3><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/xjxm1.jpg" alt="xjxm1"><br><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/xjxm2.jpg" alt="xjxm2"></p><h3 id="2.3.新建coding仓库">2.3.新建Coding仓库<a title="#2.3.新建coding仓库" href="#2.3.新建coding仓库"></a></h3><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/xjck1.jpg" alt="xjck1"><br><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/xjck2.jpg" alt="xjck2"><br><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/xjck3.jpg" alt="xjck3"></p><h3 id="2.4.上传源码至coding仓库">2.4.上传源码至Coding仓库<a title="#2.4.上传源码至coding仓库" href="#2.4.上传源码至coding仓库"></a></h3><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/gitpush.jpg" alt="gitpush" class="φcx"></p><h2 id="3.配置构建脚本">3.配置构建脚本<a title="#3.配置构建脚本" href="#3.配置构建脚本"></a></h2><p>如图，进入项目仓库，点击项目设置，功能开关，将构建与部署打开，</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/gjbs.jpg" alt="gjbs" class="φcx"></p><p>回到项目主页，点击构建，点击下方的新建构建计划</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/cxjc.jpg" alt="cxjc" class="φcx"></p><p>代码源默认为Coding，这里要注意的地方是仓库，在Coding中，一个项目可以创建多个仓库，我把Hexo源码文件放在了source仓库中。<br>勾选静态配置Jenkinsfile文件，选择自定义构建过程，勾选前往配置详情，并点击确定。</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/ci1.jpg" alt="ci" class="φcx"></p><p>点击文本编辑器，清空内容。将下方配置文件粘贴至编辑器中，修改相关内容并点击保存。</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/pz.jpg" alt="pz" class="φcx"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">  agent &#123;</span><br><span class="line">    docker &#123;</span><br><span class="line">      reuseNode true</span><br><span class="line">      registryUrl &#39;https:&#x2F;&#x2F;coding-public-docker.pkg.coding.net&#39;</span><br><span class="line">      image &#39;public&#x2F;docker&#x2F;nodejs:12&#39;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  stages &#123;</span><br><span class="line">    stage(&#39;拉取源码&#39;) &#123;</span><br><span class="line">      steps &#123;</span><br><span class="line">        checkout([$class: &#39;GitSCM&#39;,branches: [[name: env.GIT_BUILD_REF]],userRemoteConfigs: [[url: env.GIT_REPO_URL, credentialsId: env.CREDENTIALS_ID]]])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(&#39;安装Hexo&#39;) &#123;</span><br><span class="line">      steps &#123;</span><br><span class="line">        echo &#39;正在安装Hexo-cli...&#39;</span><br><span class="line">        sh &#39;npm install -g hexo-cli&#39;</span><br><span class="line">        sh &#39;npm install&#39;</span><br><span class="line">        echo &#39;安装完成.&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(&#39;生成静态文件&#39;) &#123;</span><br><span class="line">      steps &#123;</span><br><span class="line">        echo &#39;生成静态文件中...&#39;</span><br><span class="line">        sh &#39;hexo clean&#39;</span><br><span class="line">        sh &#39;hexo g&#39;</span><br><span class="line">        echo &#39;已生成静态文件，准备推送部署.&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(&#39;推送部署&#39;) &#123;</span><br><span class="line">      steps &#123;</span><br><span class="line">        echo &#39;正在推送静态文件...&#39;</span><br><span class="line">        dir(path: &#39;public&#39;) &#123;</span><br><span class="line">          script &#123;</span><br><span class="line">            writeFile(file: &#39;CNAME&#39;, text: &#39;域名&#39;)</span><br><span class="line">            sh &#39;git init&#39;</span><br><span class="line">            sh &#39;git add -A&#39;</span><br><span class="line">            sh &#39;git config user.name &quot;用户名&quot;&#39;</span><br><span class="line">            sh &#39;git config user.email &quot;邮箱&quot;&#39;</span><br><span class="line">            sh &#39;git commit -m CI&#39;</span><br><span class="line">            sh &#39;git push -f https:&#x2F;&#x2F;$&#123;GH_Token&#125;@github.com&#x2F;用户名&#x2F;仓库.git master&#39;</span><br><span class="line">            sh &#39;git push -f https:&#x2F;&#x2F;$&#123;CO_Token&#125;@e.coding.net&#x2F;用户名&#x2F;仓库.git master&#39;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        echo &#39;已完成文件推送.&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如若未使用自定义域名，可删除第30行内容。</p></blockquote><blockquote><p>如果只需要单仓库部署，请删除36或37行。</p></blockquote><p>点击变量与缓存，增加环境变量，添加两个环境变量：</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/bl.jpg" alt="bl" class="φcx"></p><p>变量名称：CO_Token，类型：字符串，默认值为上一步Coding令牌的组合。</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/cotoken.jpg" alt="cotoken" class="φcx"></p><p>变量名称：GH_Token，类型：字符串，默认值为上一步Github令牌的组合。</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/ghtoken.jpg" alt="ghtoken" class="φcx"></p><p>这里建议把保密勾选上。</p><h2 id="4.测试配置">4.测试配置<a title="#4.测试配置" href="#4.测试配置"></a></h2><p>返回构建列表，选择立即构建，测试配置是否正确。</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/gjybs.jpg" alt="gjybs" class="φcx"></p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/ljgj.jpg" alt="ljgj" class="φcx"></p><blockquote><p>如若源码仓库无文件请自行使用git上传</p></blockquote><p>然后就可以打开Coding和Github仓库查看是否成功推送。</p><p><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/ghrepo.jpg" alt="ghrepo"><br><img src="https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/corepo.jpg" alt="corepo"></p><p>祝各位一次成功！</p><p>Enjoy!</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;网上关于Hexo持续集成的文章大多是使用Travis CI，也有不少同步部署到Github和Coding的教程，不过Travis只对Github的仓库提供CI服务，由于某些原因，Github在国内的访问速度并不理想，所以采用&lt;a href=&quot;https://help.coding.net/docs/devops/ci/introduce.html&quot; target=&quot;_blank&quot;&gt;Coding CI&lt;/a&gt;进行部署。&lt;/p&gt;</summary>
    
    
    
    <category term="瞎折腾" scheme="https://blog.zr.ci/categories/xzt/"/>
    
    
    <category term="CI" scheme="https://blog.zr.ci/tags/CI/"/>
    
    <category term="Hexo" scheme="https://blog.zr.ci/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>社交蒸发冷却效应</title>
    <link href="https://blog.zr.ci/posts/sjzflq.html"/>
    <id>https://blog.zr.ci/posts/sjzflq.html</id>
    <published>2020-02-14T12:58:43.000Z</published>
    <updated>2020-02-14T12:58:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>假设有一个高级社交圈，且开放的门槛极低。那么必定会不断的吸引新成员进入，逐渐，圈内成员<strong>平均水平</strong>会不断降低。</p><a id="more"></a><p>这时，社交圈内价值最高的成员便会<strong>离开</strong>，随后，价值第二高的人也会离开。</p><p>由此，便构成了一个<strong>恶性循环</strong>，每一层的消失都将降低整个圈子的质量。</p><p>最终，归于平淡。</p><blockquote><p>该理论由硅谷的一名社交网络设计师提出。<br>文章内容如有侵权，请联系本人删除。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;假设有一个高级社交圈，且开放的门槛极低。那么必定会不断的吸引新成员进入，逐渐，圈内成员&lt;strong&gt;平均水平&lt;/strong&gt;会不断降低。&lt;/p&gt;</summary>
    
    
    
    <category term="碎碎念" scheme="https://blog.zr.ci/categories/ssn/"/>
    
    
    <category term="社交" scheme="https://blog.zr.ci/tags/social/"/>
    
  </entry>
  
</feed>
