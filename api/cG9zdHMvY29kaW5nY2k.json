{"title":"基于Coding CI实现Hexo的持续集成与Github和Coding的同步部署","date":"2020-02-20T16:21:00.000Z","date_formatted":{"ll":"2020年2月20日","L":"2020/02/20","MM-DD":"02-20"},"thumbnail":"https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/cover.jpg","color":"#111","link":"posts/codingci","comments":true,"tags":["CI","Hexo"],"categories":["瞎折腾"],"updated":"2020-10-19T16:21:00.000Z","content":"<p>网上关于Hexo持续集成的文章大多是使用Travis CI，也有不少同步部署到Github和Coding的教程，不过Travis只对Github的仓库提供CI服务，由于某些原因，Github在国内的访问速度并不理想，所以采用<a href=\"https://help.coding.net/docs/devops/ci/introduce.html\" target=\"_blank\">Coding CI</a>进行部署。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>具体流程如下：<br>\n<img src=\"https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/ci.jpg\" alt=\"ci\"></p>\n</blockquote>\n<h2 id=\"什么是持续集成(ci)：\">什么是持续集成(CI)：<a title=\"#什么是持续集成(ci)：\" href=\"#什么是持续集成(ci)：\"></a></h2>\n<blockquote>\n<p>持续集成（Continuous Integration，简称CI）是一种软件开发实践，在实践中指只要代码有变更，就自动运行构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。</p>\n</blockquote>\n<h2 id=\"1.获取访问令牌\">1.获取访问令牌<a title=\"#1.获取访问令牌\" href=\"#1.获取访问令牌\"></a></h2>\n<p>因为是需要进行双端部署，这里需要分别获取Github和Coding的访问令牌</p>\n<h3 id=\"1.1-获取coding访问令牌\">1.1 获取Coding访问令牌<a title=\"#1.1-获取coding访问令牌\" href=\"#1.1-获取coding访问令牌\"></a></h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/tokenc1.jpg\" alt=\"tokenc1\" class=\"φcx\"></p>\n<p>如图，点击新建令牌，描述可以随便填写，勾选<code>project:depot</code>的复选框即可。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/tokenc2.jpg\" alt=\"tokenc2\" class=\"φcx\"></p>\n<p>密钥只显示一次，请将获取到的密钥复制保存下来，并以<code>用户名:密钥</code>的方式组合起来。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/tokenc3.jpg\" alt=\"tokenc3\" class=\"φcx\"></p>\n<h3 id=\"1.2-获取github访问令牌\">1.2 获取Github访问令牌<a title=\"#1.2-获取github访问令牌\" href=\"#1.2-获取github访问令牌\"></a></h3>\n<p>点击：<a href=\"https://github.com/settings/tokens\" target=\"_blank\">https://github.com/settings/tokens</a></p>\n<p>申请Github账号令牌</p>\n<p>申请流程和获取Coding令牌差不多</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/tokeng1.jpg\" alt=\"tokeng1\" class=\"φcx\"></p>\n<p>名称随意，勾选<code>repo</code>复选框</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/tokeng2.jpg\" alt=\"tokeng2\" class=\"φcx\"></p>\n<p>注意保存密钥，并以<code>用户名:密钥</code>的方式组合起来。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/tokeng3.jpg\" alt=\"tokeng3\" class=\"φcx\"></p>\n<h2 id=\"2.新建仓库\">2.新建仓库<a title=\"#2.新建仓库\" href=\"#2.新建仓库\"></a></h2>\n<h3 id=\"2.1.新建github仓库\">2.1.新建GitHub仓库<a title=\"#2.1.新建github仓库\" href=\"#2.1.新建github仓库\"></a></h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/gitrepo.jpg\" alt=\"gitrepo\" class=\"φcx\"></p>\n<h3 id=\"2.2.新建coding项目\">2.2.新建Coding项目<a title=\"#2.2.新建coding项目\" href=\"#2.2.新建coding项目\"></a></h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/xjxm1.jpg\" alt=\"xjxm1\"><br>\n<img src=\"https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/xjxm2.jpg\" alt=\"xjxm2\"></p>\n<h3 id=\"2.3.新建coding仓库\">2.3.新建Coding仓库<a title=\"#2.3.新建coding仓库\" href=\"#2.3.新建coding仓库\"></a></h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/xjck1.jpg\" alt=\"xjck1\"><br>\n<img src=\"https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/xjck2.jpg\" alt=\"xjck2\"><br>\n<img src=\"https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/xjck3.jpg\" alt=\"xjck3\"></p>\n<h3 id=\"2.4.上传源码至coding仓库\">2.4.上传源码至Coding仓库<a title=\"#2.4.上传源码至coding仓库\" href=\"#2.4.上传源码至coding仓库\"></a></h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/gitpush.jpg\" alt=\"gitpush\" class=\"φcx\"></p>\n<h2 id=\"3.配置构建脚本\">3.配置构建脚本<a title=\"#3.配置构建脚本\" href=\"#3.配置构建脚本\"></a></h2>\n<p>如图，进入项目仓库，点击项目设置，功能开关，将构建与部署打开，</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/gjbs.jpg\" alt=\"gjbs\" class=\"φcx\"></p>\n<p>回到项目主页，点击构建，点击下方的新建构建计划</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/cxjc.jpg\" alt=\"cxjc\" class=\"φcx\"></p>\n<p>代码源默认为Coding，这里要注意的地方是仓库，在Coding中，一个项目可以创建多个仓库，我把Hexo源码文件放在了source仓库中。<br>\n勾选静态配置Jenkinsfile文件，选择自定义构建过程，勾选前往配置详情，并点击确定。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/ci1.jpg\" alt=\"ci\" class=\"φcx\"></p>\n<p>点击文本编辑器，清空内容。将下方配置文件粘贴至编辑器中，修改相关内容并点击保存。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/pz.jpg\" alt=\"pz\" class=\"φcx\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">  agent &#123;</span><br><span class=\"line\">    docker &#123;</span><br><span class=\"line\">      reuseNode true</span><br><span class=\"line\">      registryUrl &#39;https:&#x2F;&#x2F;coding-public-docker.pkg.coding.net&#39;</span><br><span class=\"line\">      image &#39;public&#x2F;docker&#x2F;nodejs:12&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  stages &#123;</span><br><span class=\"line\">    stage(&#39;拉取源码&#39;) &#123;</span><br><span class=\"line\">      steps &#123;</span><br><span class=\"line\">        checkout([$class: &#39;GitSCM&#39;,branches: [[name: env.GIT_BUILD_REF]],userRemoteConfigs: [[url: env.GIT_REPO_URL, credentialsId: env.CREDENTIALS_ID]]])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stage(&#39;安装Hexo&#39;) &#123;</span><br><span class=\"line\">      steps &#123;</span><br><span class=\"line\">        echo &#39;正在安装Hexo-cli...&#39;</span><br><span class=\"line\">        sh &#39;npm install -g hexo-cli&#39;</span><br><span class=\"line\">        sh &#39;npm install&#39;</span><br><span class=\"line\">        echo &#39;安装完成.&#39;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stage(&#39;生成静态文件&#39;) &#123;</span><br><span class=\"line\">      steps &#123;</span><br><span class=\"line\">        echo &#39;生成静态文件中...&#39;</span><br><span class=\"line\">        sh &#39;hexo clean&#39;</span><br><span class=\"line\">        sh &#39;hexo g&#39;</span><br><span class=\"line\">        echo &#39;已生成静态文件，准备推送部署.&#39;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stage(&#39;推送部署&#39;) &#123;</span><br><span class=\"line\">      steps &#123;</span><br><span class=\"line\">        echo &#39;正在推送静态文件...&#39;</span><br><span class=\"line\">        dir(path: &#39;public&#39;) &#123;</span><br><span class=\"line\">          script &#123;</span><br><span class=\"line\">            writeFile(file: &#39;CNAME&#39;, text: &#39;域名&#39;)</span><br><span class=\"line\">            sh &#39;git init&#39;</span><br><span class=\"line\">            sh &#39;git add -A&#39;</span><br><span class=\"line\">            sh &#39;git config user.name &quot;用户名&quot;&#39;</span><br><span class=\"line\">            sh &#39;git config user.email &quot;邮箱&quot;&#39;</span><br><span class=\"line\">            sh &#39;git commit -m CI&#39;</span><br><span class=\"line\">            sh &#39;git push -f https:&#x2F;&#x2F;$&#123;GH_Token&#125;@github.com&#x2F;用户名&#x2F;仓库.git master&#39;</span><br><span class=\"line\">            sh &#39;git push -f https:&#x2F;&#x2F;$&#123;CO_Token&#125;@e.coding.net&#x2F;用户名&#x2F;仓库.git master&#39;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        echo &#39;已完成文件推送.&#39;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如若未使用自定义域名，可删除第30行内容。</p>\n</blockquote>\n<blockquote>\n<p>如果只需要单仓库部署，请删除36或37行。</p>\n</blockquote>\n<p>点击变量与缓存，增加环境变量，添加两个环境变量：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/bl.jpg\" alt=\"bl\" class=\"φcx\"></p>\n<p>变量名称：CO_Token，类型：字符串，默认值为上一步Coding令牌的组合。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/cotoken.jpg\" alt=\"cotoken\" class=\"φcx\"></p>\n<p>变量名称：GH_Token，类型：字符串，默认值为上一步Github令牌的组合。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/ghtoken.jpg\" alt=\"ghtoken\" class=\"φcx\"></p>\n<p>这里建议把保密勾选上。</p>\n<h2 id=\"4.测试配置\">4.测试配置<a title=\"#4.测试配置\" href=\"#4.测试配置\"></a></h2>\n<p>返回构建列表，选择立即构建，测试配置是否正确。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/gjybs.jpg\" alt=\"gjybs\" class=\"φcx\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/ljgj.jpg\" alt=\"ljgj\" class=\"φcx\"></p>\n<blockquote>\n<p>如若源码仓库无文件请自行使用git上传</p>\n</blockquote>\n<p>然后就可以打开Coding和Github仓库查看是否成功推送。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/ghrepo.jpg\" alt=\"ghrepo\"><br>\n<img src=\"https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/corepo.jpg\" alt=\"corepo\"></p>\n<p>祝各位一次成功！</p>\n<p>Enjoy!</p>\n","prev":{"title":"Termux基础美化-zsh","link":"posts/termux-zsh"},"next":{"title":"社交蒸发冷却效应","link":"posts/sjzflq"},"plink":"https://blog.zr.ci/posts/codingci/","toc":[{"id":"什么是持续集成(ci)：","title":"什么是持续集成(CI)：","index":"1"},{"id":"1.获取访问令牌","title":"1.获取访问令牌","index":"2","children":[{"id":"1.1-获取coding访问令牌","title":"1.1 获取Coding访问令牌","index":"2.1"},{"id":"1.2-获取github访问令牌","title":"1.2 获取Github访问令牌","index":"2.2"}]},{"id":"2.新建仓库","title":"2.新建仓库","index":"3","children":[{"id":"2.1.新建github仓库","title":"2.1.新建GitHub仓库","index":"3.1"},{"id":"2.2.新建coding项目","title":"2.2.新建Coding项目","index":"3.2"},{"id":"2.3.新建coding仓库","title":"2.3.新建Coding仓库","index":"3.3"},{"id":"2.4.上传源码至coding仓库","title":"2.4.上传源码至Coding仓库","index":"3.4"}]},{"id":"3.配置构建脚本","title":"3.配置构建脚本","index":"4"},{"id":"4.测试配置","title":"4.测试配置","index":"5"}],"copyright":{"author":"箴扰","link":"<a href=\"https://blog.zr.ci/posts/codingci/\" title=\"基于Coding CI实现Hexo的持续集成与Github和Coding的同步部署\">https://blog.zr.ci/posts/codingci/</a>","license":"本博客所有文章除特别声明外，均采用(<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"nofollow\" target=\"_blank\">CC BY-NC-SA 4.0</a>)许可协议，转载请注明来源<a href=\"https://blog.zr.ci\" rel=\"nofollow\" target=\"_blank\">箴扰</a>！"}}