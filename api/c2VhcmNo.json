[{"title":"基于Coding CI实现Hexo的持续集成与Github和Coding的同步部署","date":"2020-02-20T16:21:00.000Z","date_formatted":{"ll":"2020年2月20日","L":"2020/02/20","MM-DD":"02-20"},"updated":"2020-10-19T16:21:00.000Z","content":"网上关于Hexo持续集成的文章大多是使用Travis CI，也有不少同步部署到Github和Coding的教程，不过Travis只对Github的仓库提供CI服务，由于某些原因，Github在国内的访问速度并不理想，所以采用Coding CI进行部署。\n\n\n具体流程如下：\n\n\n什么是持续集成(CI)：\n\n持续集成（Continuous Integration，简称CI）是一种软件开发实践，在实践中指只要代码有变更，就自动运行构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。\n\n1.获取访问令牌\n因为是需要进行双端部署，这里需要分别获取Github和Coding的访问令牌\n1.1 获取Coding访问令牌\n\n如图，点击新建令牌，描述可以随便填写，勾选project:depot的复选框即可。\n\n密钥只显示一次，请将获取到的密钥复制保存下来，并以用户名:密钥的方式组合起来。\n\n1.2 获取Github访问令牌\n点击：https://github.com/settings/tokens\n申请Github账号令牌\n申请流程和获取Coding令牌差不多\n\n名称随意，勾选repo复选框\n\n注意保存密钥，并以用户名:密钥的方式组合起来。\n\n2.新建仓库\n2.1.新建GitHub仓库\n\n2.2.新建Coding项目\n\n\n2.3.新建Coding仓库\n\n\n\n2.4.上传源码至Coding仓库\n\n3.配置构建脚本\n如图，进入项目仓库，点击项目设置，功能开关，将构建与部署打开，\n\n回到项目主页，点击构建，点击下方的新建构建计划\n\n代码源默认为Coding，这里要注意的地方是仓库，在Coding中，一个项目可以创建多个仓库，我把Hexo源码文件放在了source仓库中。\n勾选静态配置Jenkinsfile文件，选择自定义构建过程，勾选前往配置详情，并点击确定。\n\n点击文本编辑器，清空内容。将下方配置文件粘贴至编辑器中，修改相关内容并点击保存。\n\n123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354pipeline &#123;  agent &#123;    docker &#123;      reuseNode true      registryUrl &#39;https:&#x2F;&#x2F;coding-public-docker.pkg.coding.net&#39;      image &#39;public&#x2F;docker&#x2F;nodejs:12&#39;    &#125;  &#125;  stages &#123;    stage(&#39;拉取源码&#39;) &#123;      steps &#123;        checkout([$class: &#39;GitSCM&#39;,branches: [[name: env.GIT_BUILD_REF]],userRemoteConfigs: [[url: env.GIT_REPO_URL, credentialsId: env.CREDENTIALS_ID]]])      &#125;    &#125;    stage(&#39;安装Hexo&#39;) &#123;      steps &#123;        echo &#39;正在安装Hexo-cli...&#39;        sh &#39;npm install -g hexo-cli&#39;        sh &#39;npm install&#39;        echo &#39;安装完成.&#39;      &#125;    &#125;    stage(&#39;生成静态文件&#39;) &#123;      steps &#123;        echo &#39;生成静态文件中...&#39;        sh &#39;hexo clean&#39;        sh &#39;hexo g&#39;        echo &#39;已生成静态文件，准备推送部署.&#39;      &#125;    &#125;    stage(&#39;推送部署&#39;) &#123;      steps &#123;        echo &#39;正在推送静态文件...&#39;        dir(path: &#39;public&#39;) &#123;          script &#123;            writeFile(file: &#39;CNAME&#39;, text: &#39;域名&#39;)            sh &#39;git init&#39;            sh &#39;git add -A&#39;            sh &#39;git config user.name &quot;用户名&quot;&#39;            sh &#39;git config user.email &quot;邮箱&quot;&#39;            sh &#39;git commit -m CI&#39;            sh &#39;git push -f https:&#x2F;&#x2F;$&#123;GH_Token&#125;@github.com&#x2F;用户名&#x2F;仓库.git master&#39;            sh &#39;git push -f https:&#x2F;&#x2F;$&#123;CO_Token&#125;@e.coding.net&#x2F;用户名&#x2F;仓库.git master&#39;          &#125;        &#125;        echo &#39;已完成文件推送.&#39;      &#125;    &#125;  &#125;&#125;\n\n如若未使用自定义域名，可删除第30行内容。\n\n\n如果只需要单仓库部署，请删除36或37行。\n\n点击变量与缓存，增加环境变量，添加两个环境变量：\n\n变量名称：CO_Token，类型：字符串，默认值为上一步Coding令牌的组合。\n\n变量名称：GH_Token，类型：字符串，默认值为上一步Github令牌的组合。\n\n这里建议把保密勾选上。\n4.测试配置\n返回构建列表，选择立即构建，测试配置是否正确。\n\n\n\n如若源码仓库无文件请自行使用git上传\n\n然后就可以打开Coding和Github仓库查看是否成功推送。\n\n\n祝各位一次成功！\nEnjoy!\n","thumbnail":"https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/codingci/cover.jpg","color":"#111","plink":"https://blog.zr.ci/posts/codingci/"},{"title":"Heroku部署安装Typecho","date":"2020-11-26T14:11:00.000Z","date_formatted":{"ll":"2020年11月26日","L":"2020/11/26","MM-DD":"11-26"},"updated":"2020-11-26T14:11:00.000Z","content":"突然发现Heroku的玩法属实不少，便想着能不能在Heroku上部署安装Typecho，写篇文章记录一下。\n\n什么是 Heroku？\nHeroku 是一个支持多种编程语言的 PaaS(Platform-as-a-Service)。在 2010 年被 Salesforce 收购。Heroku 作为最开始的云平台之一，从 2007 年 6 月起开始开发，当时它仅支持 Ruby，后来增加了对 Java、Node.js、Scala、Clojure、Python 以及 PHP 和 Perl 的支持。\n1.Heroku基本配置\n首先，我们需要一个 Heroku 账号，如果你还没有，请自行注册一个，并绑定一张信用卡&amp;借记卡，这里不做多讲。\n1.1 安装Heroku-cli\n如果你的设备上已经安装了 Nodejs ，那么可以使用：npm i heroku-cli -g来安装heroku-cli\n否则请按照官方文档安装 heroku-cli\n安装完成后使用：heroku version来检查是否成功安装，如有类似以下输出则代表安装成功。\n12$ heroku versionheroku-cli/7.0.9 android-arm64 node-v12.18.3\n1.2 配置Heroku-cli\n安装完成heroku-cli后，使用heroku login -i登陆Heroku，回显如下：\n123456$ heroku login -iheroku: Enter your login credentialsEmail: idkzrs@gmail.comPassword: Two-factor code: Logged in as idkzrs@gmail.com\n如果以上命令无法登陆，请参考解决 Heroku-cli 无法登陆\n然后添加 SSH 密钥:\n1$ heroku keys:add\n2.部署Typecho至Heroku\nheroku-cli配置完成后就可以开始准备部署了。\n2.1 新建 Typecho 项目\n拉取Typecho源码并修改：\n123456git clone https://github.com/typecho/typecho.gitcd typechorm -rf .git* changelog.txt .editorconfig README.mdgit clone https://github.com/rvvcim/typecho-on-heroku.gitmv toh/* toh/.htaccess .rm -rf toh\n初始化Git仓库：\n123git initgit add .git commit -m &#x27;init heroku-te&#x27;\n2.2 新建 Heroku 应用\n这步可以在web操作，也可以使用 heroku-cli 进行配置，这里我使用 cli 来进行操作。\n使用heroku create新建APP，创建成功将会输出类似如下内容:\n123$ heroku createCreating app... done, ⬢ xxxxxx-xxxx-12345https://xxxxxx-xxxx-12345.herokuapp.com/ | https://git.heroku.com/xxxxxx-xxxx-12345\n其中：\nxxxxxx-xxxx-12345为应用名称\nhttps://xxxxxx-xxxx-12345.herokuapp.com/为访问链接\nhttps://git.heroku.com/xxxxxx-xxxx-12345为git仓库\n应用名称可以使用heroku rename进行修改，此操作将会同步修改访问链接和git仓库地址，如：\n1$ heroku rename zr-te\n2.3 设置应用语言\n使用如下命令将应用语言设置为PHP：\n1heroku buildpacks:set heroku/php\n若不设置语言可能导致上传时报错\n2.3 数据库配置\nHeroku提供了 MySQL 和 PgSQL 两种数据库，以插件形式添加，并各有一定免费额度，两种数据库二选一即可。\n添加MySQL插件：\n1heroku addons:create jawsdb-maria:kitefin\n添加PgSQL插件：\n1heroku addons:create heroku-postgresql:hobby-dev\n注：二选一即可，我这里使用MySQL举例。\n添加完 MySQL/PgSQL后，前往Heroku管理面板，找到刚才新建的应用，点击导航栏中的Settings，找到 Config Vars 项，点击Reveal Config Vars\n\n将会显示MySQL/PgSQL连接信息，解析如下：\n\n\nNAME\nKEY\nVALUE\n\n\n\n\nMySQL\nJAWSDB_MARIA_URL\nmysql://用户名:密码@数据库主机:3306/数据库名称\n\n\nPgSQL\nDATABASE_URL\npostgres://用户名:密码@数据库主机:5432/数据库名称\n\n\n修改config.inc.php文件中数据库相关配置：\n1234567891011121314151617181920212223242526/** 定义MySQL数据库参数 *//**与下方PgSQL参数无法共存，请选择一项进行填写$db = new Typecho_Db(&#x27;Pdo_Mysql&#x27;, &#x27;typecho_&#x27;);$db-&gt;addServer(array (  &#x27;host&#x27; =&gt; &#x27;数据库地址&#x27;,  &#x27;user&#x27; =&gt; &#x27;数据库用户名&#x27;,  &#x27;password&#x27; =&gt; &#x27;数据库密码&#x27;,                                           &#x27;charset&#x27; =&gt; &#x27;utf8mb4&#x27;,  &#x27;port&#x27; =&gt; &#x27;3306&#x27;,  &#x27;database&#x27; =&gt; &#x27;数据库名称&#x27;,  &#x27;engine&#x27; =&gt; &#x27;MyISAM&#x27;,), Typecho_Db::READ | Typecho_Db::WRITE);Typecho_Db::set($db);        **//** 定义PgSQL数据库参数 *//**与上方MySQL参数无法共存，请选择一项进行填写$db = new Typecho_Db(&#x27;Pdo_Pgsql&#x27;, &#x27;typecho_&#x27;);$db-&gt;addServer(array (  &#x27;host&#x27; =&gt; &#x27;数据库地址&#x27;,  &#x27;user&#x27; =&gt; &#x27;数据库用户名&#x27;,  &#x27;password&#x27; =&gt; &#x27;数据库密码&#x27;,  &#x27;charset&#x27; =&gt; &#x27;utf8&#x27;,  &#x27;port&#x27; =&gt; &#x27;5432&#x27;,  &#x27;database&#x27; =&gt; &#x27;数据库名称&#x27;,), Typecho_Db::READ | Typecho_Db::WRITE);Typecho_Db::set($db);        **/\n删除其中一项的注释，并填写相关配置，然后更新git仓库：\n12git add .git commit -m &#x27;update config&#x27;\n2.4 推送项目至Heroku\n接下来，使用如下命令将项目推送至Heroku\n1git push heroku master\n然后打开：https://APP_NAME.herokuapp.com/install.php\n安装typecho\n3.绑定域名\n这一步非必须，为可选步骤。\n前往Heroku管理面板，找到新建的应用，点击导航栏中的Settings，下拉找到Domains\n点击Add domains\n\n\n将域名解析至cname地址即可\nEnjoy !\n","thumbnail":"https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/typechoonheroku/cover.jpg","color":"#111","plink":"https://blog.zr.ci/posts/typechoonheroku/"},{"title":"解决 Heroku-cli 无法登陆","date":"2020-10-17T14:11:00.000Z","date_formatted":{"ll":"2020年10月17日","L":"2020/10/17","MM-DD":"10-17"},"updated":"2020-10-17T14:11:00.000Z","content":"在折腾 heroku 部署 OLAINDEX 时，使用 heroku login 但出现报错\n\n12345 ›   Warning: login is not a heroku command.Did you mean join? [y&#x2F;n]: y ›   Error: Missing required flag: ›    -a, --app APP  app to run command against ›   See more help with --help\n随即便尝试使用heroku login -i但依旧是无法登陆\n于是便去看了看 help ，找到了解决方法。\n1.获取 API Key\n登陆 Heroku 后，前往 Account settings 页\n找到API选项，点击 Reveal 复制 API Key\n2.新建 .netrc\nLinux：\n1touch ~&#x2F;.netrc\nWindows：找到环境变量目录新建：.netrc 文件\n3.编辑 .netrc\n使用vi/vim等编辑器编辑 ~/.netrc\n输入如下内容：\n123456machine api.heroku.com  login #heroku绑定的邮箱  password #你的API Keymachine git.heroku.com  login #heroku绑定的邮箱  password #你的API Key\n随后就可以尝试进行操作了233\nEnjoy !\n","thumbnail":"https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/herokuclilogin/cover.jpg","color":"#111","plink":"https://blog.zr.ci/posts/herokuclilogin/"},{"title":"小米MIX 2S System分区扩容","date":"2020-08-09T14:11:00.000Z","date_formatted":{"ll":"2020年8月9日","L":"2020/08/09","MM-DD":"08-09"},"updated":"2020-08-15T14:11:00.000Z","content":"前言：\n由于MIX 2s的System分区过小，导致部分gsi无法刷入，故扩容分区，顺便制作为卡刷包方便使用。\n\n设备要求：\ni：确保您的设备为小米MIX 2s\nii：设备已解除BL锁并拥有第三方Recovery\n有损扩容\n使用方法：\ni：下载本人提供的 MIX2s_5GB_System.zip 文件\nii：重启至Recovery\niii：找到 MIX2s_5GB_System.zip 并刷入\niv:重启至Recovery，格式化： System,Vendor,Data\n注意：由于会清除 System,Vendor,Data 三个分区的数据，请提前备份您的所有重要数据，如果您的身边没有电脑或其它存储设备，请下载 los 的ROM并复制到 /cust 目录一份，方便刷入。\n原理：\n使用sgdisk对磁盘进行重新分区\n常见问题：\nQ:扩容之后可以还原吗？\nA:可以，刷一次3GB的文件即可还原。另：如果已经扩容分区，之后想更换其它的大小的分区，请务必先还原。\nQ:扩容之后可以刷官方ROM吗？\nA:可以，但是需要注意官方有dm校验，不去除会卡第一屏，可以通过同时刷入magisk去除。\nQ:扩容之后可以线刷吗？\nA:可以，但不推荐这样做，如果需要线刷，请勿勾选锁定选项，否则可能会导致需要售后解决。\nQ:为什么我扩容之后刷入ROM却显示System大小为3GB\nA:这是因为ROM打包时是按照3GB大小打包的，请前往Recovery，点击：分区管理 - System - 调整分区大小。Vendor分区同理。\n无损扩容\n此方法极度危险，并且不推荐使用，如果您没有相关经验，请谨慎。\n手机重启至第三方Recovery连接电脑，下载我提供的无损扩容文件\n解压并进入目录,按 Shift+右键 选择打开Powershell\n输入以下命令（此处为win10）：\n123456789101112131415161718./adb push sgdisk /sbin./adb shellcomod 0777 /sbin/sgdisksgdisk --delete=18 /dev/block/sdasgdisk --delete=19 /dev/block/sdasgdisk --delete=20 /dev/block/sdasgdisk --delete=47 /dev/block/sdesgdisk --delete=48 /dev/block/sdesgdisk --new 0:0:+1024M --change-name=18:vendor --typecode=18:97D7B011-54DA-4835-B3C4-917AD6E73D74 /dev/block/sdasgdisk --new 0:0:+64M --change-name=19:recovery --typecode=19:9D72D4E4-9958-42DA-AC26-BEA7A90B0434 /dev/block/sdasgdisk --new 0:0:0 --change-name=20:cache --typecode=20:5594C694-C871-4B5F-90B1-690A6F68E0F7 /dev/block/sdasgdisk --new 0:0:+512M --change-name=47:cust --typecode=47:C3008246-512A-4FEB-8A51-068FA4AD5F6D /dev/block/sdesgdisk --new 0:0:0 --change-name=48:system --typecode=48:97D7B011-54DA-4835-B3C4-917AD6E73D74 /dev/block/sdereboot bootloader\n此时手机将重启至fastboot，保持设备连接，在Powershell中输入：\n12./fastboot flash recovery recovery.img./fastboot boot recovery.img\n不出意外，您的手机将重启至Recovery ，请保持设备连接。\n在Powershell中输入：\n12345678910./adb shellmke2fs -t ext4 -b 4096 /dev/block/sde47mke2fs -t ext4 -b 4096 /dev/block/sda18e2fsdroid -e -S /file_contexts -a /vendor /dev/block/sda18mke2fs -t ext4 -b 4096 /dev/block/sda20e2fsdroid -e -S /file_contexts -a /cache /dev/block/sda20mke2fs -t ext4 -b 4096 /dev/block/sde48e2fsdroid -e -S /file_contexts -a / /dev/block/sde48reboot recovery\n并在Recovery中格式化： System,Vendor,Data,Cache\n至此，扩容完成。\n下方是本人执行扩容时的回显内容，可以参考。\n123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112PS C:\\platform-tools&gt; ./adb push sgdisk /sbinPS C:\\platform-tools&gt; ./adb shellsh-5.0# chmod 0777 /sbin/sgdisksh-5.0# sgdisk --delete=18 /dev/block/sdaWarning: The kernel is still using the old partition table.The new table will be used at the next reboot.The operation has completed successfully.sh-5.0# sgdisk --delete=19 /dev/block/sdaWarning: The kernel is still using the old partition table.The new table will be used at the next reboot.The operation has completed successfully.sh-5.0# sgdisk --delete=20 /dev/block/sdaWarning: The kernel is still using the old partition table.The new table will be used at the next reboot.The operation has completed successfully.sh-5.0# sgdisk --delete=47 /dev/block/sdeThe operation has completed successfully.sh-5.0# sgdisk --delete=48 /dev/block/sdeThe operation has completed successfully.sh-5.0# sgdisk --new 0:0:+1024M --change-name=18:vendor --typecode=18:97D7B011-54DA-4835-B3C4-917AD6E73D74 /dev/block/&gt;Setting name!partNum is 17REALLY setting name!Warning: The kernel is still using the old partition table.The new table will be used at the next reboot.The operation has completed successfully.sh-5.0# sgdisk --new 0:0:+64M --change-name=19:recovery --typecode=19:9D72D4E4-9958-42DA-AC26-BEA7A90B0434 /dev/block/&gt;Setting name!partNum is 18REALLY setting name!Warning: The kernel is still using the old partition table.The new table will be used at the next reboot.The operation has completed successfully.sh-5.0# sgdisk --new 0:0:+0 --change-name=20:cache --typecode=20:5594C694-C871-4B5F-90B1-690A6F68E0F7 /dev/block/sdaSetting name!partNum is 19REALLY setting name!Warning: The kernel is still using the old partition table.The new table will be used at the next reboot.The operation has completed successfully.sh-5.0# sgdisk --new 0:0:+512M --change-name=47:cust --typecode=47:C3008246-512A-4FEB-8A51-068FA4AD5F6D /dev/block/sdeSetting name!partNum is 46REALLY setting name!The operation has completed successfully.sh-5.0# sgdisk --new 0:0:0 --change-name=48:system --typecode=48:97D7B011-54DA-4835-B3C4-917AD6E73D74 /dev/block/sdeSetting name!partNum is 47REALLY setting name!The operation has completed successfully.sh-5.0# sgdisk --print /dev/block/sdeDisk /dev/block/sde: 1179648 sectors, 4.5 GiBLogical sector size: 4096 bytesDisk identifier (GUID): A9708BF8-6148-6573-F93F-EF3C911FC364Partition table holds up to 64 entriesFirst usable sector is 6, last usable sector is 1179642Partitions will be aligned on 2-sector boundariesTotal free space is 16379 sectors (64.0 MiB)Number  Start (sector)    End (sector)  Size       Code  Name   1               6              13   32.0 KiB    FFFF  sec   2              14              21   32.0 KiB    FFFF  limits   3              22              63   168.0 KiB   FFFF  bk41   4              64              95   128.0 KiB   FFFF  qupfw_a   5              96             127   128.0 KiB   FFFF  qupfw_b   6             128             191   256.0 KiB   FFFF  apdp   7             192             255   256.0 KiB   FFFF  msadp   8             256             287   128.0 KiB   FFFF  vbmeta   9             288             319   128.0 KiB   FFFF  bk42  10             320             351   128.0 KiB   FFFF  storsec_a  11             352             383   128.0 KiB   FFFF  storsec_b  12             384             447   256.0 KiB   FFFF  devcfg_a  13             448             511   256.0 KiB   FFFF  devcfg_b  14             512             639   512.0 KiB   FFFF  aop_a  15             640             767   512.0 KiB   FFFF  aop_b  16             768             895   512.0 KiB   FFFF  bk43  17             896            1023   512.0 KiB   FFFF  bk44  18            1024            1279   1024.0 KiB  FFFF  cmnlib_a  19            1280            1535   1024.0 KiB  FFFF  cmnlib_b  20            1536            1791   1024.0 KiB  FFFF  cmnlib64_a  21            1792            2047   1024.0 KiB  FFFF  cmnlib64_b  22            2048            2303   1024.0 KiB  FFFF  keymaster_a  23            2304            2559   1024.0 KiB  FFFF  keymaster_b  24            2560            2815   1024.0 KiB  FFFF  bluetooth  25            2816            3071   1024.0 KiB  FFFF  bk45  26            3072            3327   1024.0 KiB  FFFF  hyp_a  27            3328            3583   1024.0 KiB  FFFF  hyp_b  28            3584            3839   1024.0 KiB  FFFF  dip  29            3840            4095   1024.0 KiB  FFFF  bk46  30            4096            4607   2.0 MiB     FFFF  sti  31            4608            5119   2.0 MiB     FFFF  toolsfv  32            5120            5631   2.0 MiB     FFFF  abl_a  33            5632            6143   2.0 MiB     FFFF  abl_b  34            6144            7167   4.0 MiB     FFFF  tz_a  35            7168            8191   4.0 MiB     FFFF  tz_b  36            8192           10239   8.0 MiB     FFFF  fsg  37           10240           12287   8.0 MiB     FFFF  dtbo  38           12288           14335   8.0 MiB     FFFF  bk47  39           14336           16383   8.0 MiB     FFFF  spunvm  40           16384           20479   16.0 MiB    FFFF  bk48  41           20480           24575   16.0 MiB    FFFF  bk49  42           24576           32767   32.0 MiB    FFFF  splash  43           32768           40959   32.0 MiB    FFFF  logo  44           40960           49151   32.0 MiB    FFFF  dsp  45           49152           65535   64.0 MiB    FFFF  boot  46           65536          114687   192.0 MiB   0700  modem  47          114688          245759   512.0 MiB   FFFF  cust  48          245760         1163263   3.5 GiB     FFFF  system  49         1163264         1179642   64.0 MiB    FFFF  last_partish-5.0#\n免责声明：\ni：本人仅提供扩容文件，不对使用文件后造成的如：数据丢失、硬件损坏等后果负责。\nii：您必须明白并且承担使用文件后所造成的后果。\niii：如不同意以上内容请不要使用本文件。\n扩容文件：\nLink：https://pans.lanzous.com/b0dq5x2ni\nKey:idkzr\n扩容视频：\nhttp://www.bilibili.com/video/BV1gK411T74X\n","thumbnail":"https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/mix2skr/cover.png","color":"#111","plink":"https://blog.zr.ci/posts/mix2skr/"},{"title":"碎片化信息","date":"2020-07-14T14:11:00.000Z","date_formatted":{"ll":"2020年7月14日","L":"2020/07/14","MM-DD":"07-14"},"updated":"2020-07-14T14:11:00.000Z","content":"这是一个碎片化信息超载的时代，人们看起来仿佛获得了越来越多的资讯，有了越来越大的思维认知空间，但实际上却越来越活在信息的孤岛中。\n\n在信息不发达的时代，人们难以获得真相。在信息爆炸时代，人们只相信符合自己价Z观的真相。\n信息的不断增多，带来的并不是兼听则明的理性认识、并不是求同存异的平和探讨、并不是带有自我审视自我称量的自知之明。\n在这个“后真相时代”，能被人们装进脑袋里的，只有那些与原来的认知相容的信息碎片。\n装的越多，他们就越“自信”。内容越同质，他们就越偏执。\n人们在信息浪潮中并没有变得越来越聪明，而是表面看起来很聪明而实际上越来越蠢。\n在思想的极化中，不同的人群皆被情绪和偏见裹挟，理性对话越来越困难，社会化认知正在因此不断走向撕裂。\n","thumbnail":"https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/sphxx/cover.jpg","color":"#111","plink":"https://blog.zr.ci/posts/sphxx/"},{"title":"Hexo访问速度优化","date":"2020-06-30T14:11:00.000Z","date_formatted":{"ll":"2020年6月30日","L":"2020/06/30","MM-DD":"06-30"},"updated":"2020-06-30T14:11:00.000Z","content":"相信各位大部分都是把hexo托管到github pages上，然鹅由于某众所周知的原因，github 在国内访问速度不太理想，便水一篇文章写一下我的解决方案。\n\n本文默认读者已有一个使用Hexo搭建并放置于github pages的博客，故略去部分基础内容。\n1 国内优化\n国内我选择的是又拍云，原因很简单：又拍云联盟\n又拍云联盟是由又拍云推出的开发者帮助计划，对开发者提供免费且完善的云存储、CDN 等服务，加速个人网站、博客、APP 等项目，每月可免费使用 10GB 存储空间及 15GB 的 CDN 流量（HTTP/HTTPS )对于个人博客来说妥妥够用。\n1.1 新建云储存\n在又拍云控制台点击云储存，新建一个云储存服务并记下服务名称，操作员名称，操作员密码及后面的CNAME地址。\n\n1.2 安装又拍云插件\n进入Hexo根目录，打开命令行使用npm install hexo-deployer-upyundeploy --save安装又拍云上传插件。\n打开Hexo根目录下_config.yml文件，找到deploy字段，添加如下内容：\n12345deploy:  - type: upyun    serviceName: 服务名称    operatorName: 操作员名称    operatorPassword: 操作员密码\n随后可以使用hexo cl &amp;&amp; hexo g &amp;&amp; hexo d测试是否可用。\n2 国外优化\n这步其实可有可无，因为github在国外的访问速度本就足够快，但为了避免再次发生类似前段时间针对github的中间人攻击，我选择再加上Cloudflare的CDN。\n2.1 接入Cloudflare\n由于CF官方限制免费用户无法使用CNAME接入，我这里选择使用第三方CFP。\n使用CF账号登陆之后添加一个cname记录，记录值填写username.github.io\n\n(注:不要照抄，把username换成你的github用户名。。。)\n随后会给出一个CNAME记录，记下来。\n\n3 设置域名解析\n国内大部分DNS解析服务商都支持分线路解析，请自行将解析记录设置为默认线路CF，国内线路又拍。\n4 进阶设置\n看过我之前文章的应该知道，我把Hexo源文件放在了Coding上，并使用Coding CI实现Hexo的持续集成与Github和Coding的同步部署\n使用又拍云储存之后，原本的的CI脚本便不在适用了，需要在21行之后另起一行，输入：\n1sh &#39;hexo d&#39;\n至此，速度优化便折腾完了，各位不妨一试。\n\nEnjoy\n","thumbnail":"https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/hexospeed/cover.jpg","color":"#111","plink":"https://blog.zr.ci/posts/hexospeed/"},{"title":"盘点那些数量繁多的USB接口","date":"2020-05-17T14:11:00.000Z","date_formatted":{"ll":"2020年5月17日","L":"2020/05/17","MM-DD":"05-17"},"updated":"2020-05-17T14:11:00.000Z","content":"USB协议推出的20多年间，出现了三大类，十数种不同的USB接口。本文就来说一下这些数量繁多的USB接口。\n\n1、 USB的科普及接口图\nUSB，是英文Universal Serial Bus（通用串行总线）的缩写，是一个外部总线标准，用于规范电脑与外部设备的连接和通讯。它是由以微软和英特尔为核心的 USB-IF 组织于1994年推出的标准。\n1.1、 USB类型\nUSB类型有A、B两种，A型用于主机，B型用于设备（Type-A就是A型的接口）\nMini、Micro是小型化标准接口，而Mini、Micro或标准这三种规格都有A型和B型的接口。\n1.2、 USB接口一览\n\n2、 Mini接口\nMini USB是最早的小型化标准接口，另外有个小名叫“T型口”，现已基本淘汰完毕，其中应用最广泛的是5pin，我们一般说Mini USB默认指的是B型 5pin，但现在仍不乏一些山寨厂商用在“玩具型”学习机、老年唱戏机以及一些音箱等等低端设备上面。\n\nMini-AB\nMini USB有一种母座叫Mini-AB，可以同时兼容Mini-A和Mini B(5pin)\n\nMini-B 10pin\nMini-B 10pin是mini家族唯一支持USB 3.2协议，主要用于移动硬盘，算是5pin的魔改版本，外观相似，区别在于内部是双面针脚。现在也销声匿迹了\n除此之外的Mini USB均只支持USB2.0\n2、 Micro接口\nMicro接口2007年发布用于替代Mini。\n\n2009年2月17日，全球移动通信联盟协会宣布在2012年前将使用Micro-USB作为全球统一的标准充电器规格。\n首批签署协议的手机厂商包括：诺基亚、LG、摩托罗拉、三星、索尼移动\n2.1、 Micro-A、Micro-B\nMicro-A仅支持USB 2.0，现已经淘汰，不再使用\nMicro-B 2.0也就是大家口头上说的“安卓口”（诺基亚作为首批签推广协议的厂商，听到这个词肯定气得发抖）\n2.1.1、 Micro-B 3.2\nMicro-B 3.2的接口现在普遍用在移动硬盘盒上，且Micro-B 2.0的插头可以插在Micro B 3.2的母座上用\n\n2.2、 Micro-AB\nMicro和Mini一样，也有一种万能母座，叫Micro-AB，同时兼容Micro-A和Micro-B(2.0)\n\n3、 标准USB接口\nUSB发展到今天，Mini、Micro已经逐渐不能满足需要了，标准USB接口便应运而生\n\n3.1、 Type-A、Type-B\n我们说Type-A、Type-B时默认指的是“标准 Type-A”、“标准Type-B”\nType-A分2.0和3.2两种，2.0便是我们常见数据线较大的一方。\nType-A 3.2的接口是在2.0的基础上，在里面加了5个针脚，所以当3.2接口插的比较浅时，会以2.0模式运行（非正常操作）\nType-B接口主要用在扫描仪、打印机、外置光驱盒等，毕竟它是“标准”接口，而不是Mini、Micro这行小型化接口，所以我们在便携数码设备上看不到这个接口，自然大部分人接触得比较少啦\n3.2、 Type-C\n前面说了，USB类型有A、B两种，分别用于主机和设备，而Type-C的推出便改变了这项标准。\nType-C既是A型也是B型，也可以说它既不是A型也不是B型，应为它可以同时应用在主机和设备上，因此命名为Type-C。\n\n本文原作者：@FelixCHN\n有删改，已经原作者授权\n\n","thumbnail":"https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/usbjk/cover.jpg","color":"#111","plink":"https://blog.zr.ci/posts/usbjk/"},{"title":"利用Cloudflare Workers 制作Google镜像站","date":"2020-05-01T14:11:00.000Z","date_formatted":{"ll":"2020年5月1日","L":"2020/05/01","MM-DD":"05-01"},"updated":"2020-05-01T14:11:00.000Z","content":"今天在gayhub上面闲逛，发现了一个利用Cloudflare Workers 制作Google镜像站的方法。\n\nCloudflare Workers是什么各位可以自行搜索，这里不做过多介绍。\n新建 Workers\n登陆cf之后点击 Workers\n\n创建子域名\n\n点击创建 Workers\n\n部署代码\n编辑Workers\n将以下代码粘贴至代码框\n123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152// Website you intended to retrieve for users.const upstream = &#x27;www.google.com&#x27;// Custom pathname for the upstream website.const upstream_path = &#x27;/&#x27;// Website you intended to retrieve for users using mobile devices.const upstream_mobile = &#x27;www.google.com&#x27;// Countries and regions where you wish to suspend your service.const blocked_region = [&#x27;KP&#x27;, &#x27;SY&#x27;, &#x27;PK&#x27;, &#x27;CU&#x27;]// IP addresses which you wish to block from using your service.const blocked_ip_address = [&#x27;0.0.0.0&#x27;, &#x27;127.0.0.1&#x27;]// Whether to use HTTPS protocol for upstream address.const https = true// Whether to disable cache.const disable_cache = true// Replace texts.const replace_dict = &#123;    &#x27;$upstream&#x27;: &#x27;$custom_domain&#x27;,    &#x27;//google.com&#x27;: &#x27;&#x27;&#125;addEventListener(&#x27;fetch&#x27;, event =&gt; &#123;    event.respondWith(fetchAndApply(event.request));&#125;)async function fetchAndApply(request) &#123;    const region = request.headers.get(&#x27;cf-ipcountry&#x27;).toUpperCase();    const ip_address = request.headers.get(&#x27;cf-connecting-ip&#x27;);    const user_agent = request.headers.get(&#x27;user-agent&#x27;);    let response = null;    let url = new URL(request.url);    let url_hostname = url.hostname;    if (https == true) &#123;        url.protocol = &#x27;https:&#x27;;    &#125; else &#123;        url.protocol = &#x27;http:&#x27;;    &#125;    if (await device_status(user_agent)) &#123;        var upstream_domain = upstream;    &#125; else &#123;        var upstream_domain = upstream_mobile;    &#125;    url.host = upstream_domain;    if (url.pathname == &#x27;/&#x27;) &#123;        url.pathname = upstream_path;    &#125; else &#123;        url.pathname = upstream_path + url.pathname;    &#125;    if (blocked_region.includes(region)) &#123;        response = new Response(&#x27;Access denied: WorkersProxy is not available in your region yet.&#x27;, &#123;            status: 403        &#125;);    &#125; else if (blocked_ip_address.includes(ip_address)) &#123;        response = new Response(&#x27;Access denied: Your IP address is blocked by WorkersProxy.&#x27;, &#123;            status: 403        &#125;);    &#125; else &#123;        let method = request.method;        let request_headers = request.headers;        let new_request_headers = new Headers(request_headers);        new_request_headers.set(&#x27;Host&#x27;, url.hostname);        new_request_headers.set(&#x27;Referer&#x27;, url.hostname);        let original_response = await fetch(url.href, &#123;            method: method,            headers: new_request_headers        &#125;)        let original_response_clone = original_response.clone();        let original_text = null;        let response_headers = original_response.headers;        let new_response_headers = new Headers(response_headers);        let status = original_response.status;                if (disable_cache) &#123;            new_response_headers.set(&#x27;Cache-Control&#x27;, &#x27;no-store&#x27;);        &#125;        new_response_headers.set(&#x27;access-control-allow-origin&#x27;, &#x27;*&#x27;);        new_response_headers.set(&#x27;access-control-allow-credentials&#x27;, true);        new_response_headers.delete(&#x27;content-security-policy&#x27;);        new_response_headers.delete(&#x27;content-security-policy-report-only&#x27;);        new_response_headers.delete(&#x27;clear-site-data&#x27;);                if(new_response_headers.get(&quot;x-pjax-url&quot;)) &#123;            new_response_headers.set(&quot;x-pjax-url&quot;, response_headers.get(&quot;x-pjax-url&quot;).replace(&quot;//&quot; + upstream_domain, &quot;//&quot; + url_hostname));        &#125;                const content_type = new_response_headers.get(&#x27;content-type&#x27;);        if (content_type.includes(&#x27;text/html&#x27;) &amp;&amp; content_type.includes(&#x27;UTF-8&#x27;)) &#123;            original_text = await replace_response_text(original_response_clone, upstream_domain, url_hostname);        &#125; else &#123;            original_text = original_response_clone.body        &#125;                response = new Response(original_text, &#123;            status,            headers: new_response_headers        &#125;)    &#125;    return response;&#125;async function replace_response_text(response, upstream_domain, host_name) &#123;    let text = await response.text()    var i, j;    for (i in replace_dict) &#123;        j = replace_dict[i]        if (i == &#x27;$upstream&#x27;) &#123;            i = upstream_domain        &#125; else if (i == &#x27;$custom_domain&#x27;) &#123;            i = host_name        &#125;        if (j == &#x27;$upstream&#x27;) &#123;            j = upstream_domain        &#125; else if (j == &#x27;$custom_domain&#x27;) &#123;            j = host_name        &#125;        let re = new RegExp(i, &#x27;g&#x27;)        text = text.replace(re, j);    &#125;    return text;&#125;async function device_status(user_agent_info) &#123;    var agents = [&quot;Android&quot;, &quot;iPhone&quot;, &quot;SymbianOS&quot;, &quot;Windows Phone&quot;, &quot;iPad&quot;, &quot;iPod&quot;];    var flag = true;    for (var v = 0; v &lt; agents.length; v++) &#123;        if (user_agent_info.indexOf(agents[v]) &gt; 0) &#123;            flag = false;            break;        &#125;    &#125;    return flag;&#125;\n点击左上角修改项目名（可选）\n点击右下角保存并部署\n\n确认部署\n\n点击预览查看\n\n绑定域名\n添加路由\n回到域名管理，选择你的域名\n点击Workers，点击添加路由\n\n路由填写你需要解析的域名，Workers选择刚刚新建的Workers项目名\n我这里以gogoogle.ml举例，注意在域名后面填写/*\n\n添加解析\n这个是可以随便填写的，无论你写的什么，cf都会绑定到Workers上面\n\n预览\n!!!\n\n[btnyellow href=\"http://gogoogle.ml/\" target=\"blank\"]点击预览[/btnyellow]\n!!!\n","thumbnail":"https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/cwgi/cover.jpg","color":"#111","plink":"https://blog.zr.ci/posts/cwgi/"},{"title":"盘点一下那些我用过的免费CDN","date":"2020-04-16T16:12:00.000Z","date_formatted":{"ll":"2020年4月16日","L":"2020/04/16","MM-DD":"04-16"},"updated":"2020-04-16T16:12:00.000Z","content":"众所周知，箴扰是个的穷孩纸，没得一丢丢小钱钱，又想给网站套个CDN，加快一下访问速度，于是就有了这篇文章。\n\n\nCDN是什么？\nCDN的全称是Content Delivery Network，即内容分发网络。依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。\n\n好的，现在进入正题盘点一下我用过的可以白嫖的CDN，这里因为某些原因我会分为两个区。\n备案区\n域名备案了的话是会方便不少的，本人的备案注销了QWQ。\n一、又拍云\n\n相信很多人都对又拍云有所耳闻，只需要在网页底部加入又拍云的logo，即可申请加入又拍云联盟，之后每月可以享有15G CDN流量，支持http/https访问，速度不错国内一片绿。\n链接：https://www.upyun.com/\n二、七牛云\n\n七牛云也是国内老牌的商家了，七牛云的开发者计划提供了每月国内及海外分别10G CDN流量，但是仅针对http请求免费，https需要额外付费，不过价格十分优惠，且可以通过邀请好友来提升免费额度。\n链接： https://www.qiniu.com/\n三、腾讯云\n\n腾讯云针对新用户会在前六个月每月赠送50G流量包，六个月之后每月10G流量，本人在使用的时候发现对电信网络访问有一丢丢不友好，当然，也可能是我配置问题。\n链接：https://cloud.tencent.com/product/cdn\n四、百度云\n\n百度云加速免费用户每天可用10G流量，并且按官网说法对百度搜索有SEO优化，可以加快百度收录速度，免费用户会分配8个国内节点和2个国外节点，总体来说还算不错。\n链接：https://su.baidu.com/\n五、猫云\n\n猫云算是个新秀，推出的猫云联盟和又拍云联盟类似，需要在网站底部加上猫云logo，每月赠送30G CDN流量，访问速度也算不错。\n链接：https://www.maoyuncloud.com/\n自由区\n下面的这些都无需备案，自由发育(ಡωಡ)\n1.Cloudflare\n\ncf可以说是霸主级别的存在，没得流量限制，免费用户可以通过cfp自选IP及分区域解析来实现访问速度的优化，不过这需要一点点耐心。\n链接：https://www.cloudflare.com/\n2.Nodecache\n\n新用户赠一个月流量，走aff注册账号享有1t流量和100G中国直连流量，也可以自行注册获得500G流量，这家最近推出了一个中国直连的流量包，速度还算不错。\n链接：https://www.nodecache.com/\n3.DDOS-GUARD\n\n这家的CDN貌似不限流量，有香港的节点，速度还说得过去，不过使用ssl需要升级账户才行。\n链接：https://ddos-guard.net/\n4.企鹅小屋\n\n企鹅小屋最近公测CDN，可以免费开一年的套餐，限制两个域名，每个月50G流量，节点数量和质量还算不错，值得一试(ಡωಡ)\n链接：http://www.aipky.com/\n5.其它\n上面只说了我使用过的，还有一些我了解但没使用过的，各位可以自行尝试。\npsychz.net  免费50G/月\nnetdepot.com 免费100G/月\nAWS CLOUDFONT 12个月免费50G\n","thumbnail":"https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/freecdn/cover.jpg","color":"#111","plink":"https://blog.zr.ci/posts/freecdn/"},{"title":"愿逝者安息，愿生者奋发，愿祖国昌盛！","date":"2020-04-04T08:00:00.000Z","date_formatted":{"ll":"2020年4月4日","L":"2020/04/04","MM-DD":"04-04"},"updated":"2020-04-04T08:00:00.000Z","content":"阳历4月4日，阴历三月十二，是庚子年的清明。\n这个清明节与往常的清明节没什么不同，却也有很大的不同。\n\n请记住这十四个名字：\n王兵、冯效林、江学庆、刘智明、李文亮、张抗美、肖俊、吴涌、柳帆、夏思思、黄文军、梅仲明、彭银华、廖建军。\n他们是牺牲在防疫情防控一线的首批烈士。此时此刻，心中唯有无尽的感激。\n另外，说一个火神山的不完全建设手册：首先，需要一个紧急命令，在5万平方米的坡地上指挥7500人向全体国人立下一个军令状：10天，建成一所1000张床位的救命医院。\n接着，需要设计研究院在78分钟之内将17年前的小汤山图纸全部整理完毕，24小时内出设计图，60小时之内敲定施工图稿。\n接下来，需要国家电网260多名员工不眼不休，24小时连续工作，完成8000米电力电缆铺设，需要华为、中国移动、中国联通、中国电信、中国电子、中国信科、中国铁塔等前后方企业紧密配合，在36小时内完成5G信号覆盖，交付云资源，并且建成与解放军总医院的远程会诊系统。\n而完成了这些之后，才仅仅可以开始动工。\n所谓的中国速度，不过是一个个朴实善良的劳动者，一个个不畏生死的医护人员，一点一滴积累出来的。\n除此之外，只怕还有一个更重要的原因，是让其他国家想抄作业都抄不好的原因之所在：援鄂医疗队加当地医护总共17万人，每人每天补助200元，一天就是3400万。\n每套防护服成本至少300元，就算医护人员不吃不喝不上厕所不睡觉，计算下来每人至少需要十几套，成本超过五亿。\n重症患者每人几十万元，全国确诊几万例，再加上雷神山、火神山、方舱医院，各地封城封路，每天的抗疫消耗几乎相当于一场中等烈度的战争。\n就在奔驰喊着日亏4亿的时候，比亚迪和五菱已经开始造起了口罩。当国外还在要求自由集会的时候，中国的十四亿人已经自觉的窝在了家里。\n在各国关心的大多是“经济”、“股市”的时候，只有投入已经超过1169亿的中国对钱只字未提，只提生命。\n我不知道那些想跑步，想喝矿泉水的人到底在想什么。\n但是我知道，现在的太平，是烈士用生命换来的，是国家，还有全国人民共同的付出换来的。\n也请诸君共同感恩烈士，缅怀烈士，共同守护先贤和烈士们用生命才换来的太平。\n其实我并不喜欢烈士这个称号，因为这个称号往往意味着牺牲。\n太平本是烈士定，烈士何曾享太平？\n愿逝者安息，愿生者奋发，愿祖国昌盛！\n以上。\n","thumbnail":"https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/szax/cover.jpg","color":"#111","plink":"https://blog.zr.ci/posts/rip/"},{"title":"Android使用 Termux 搭建web服务并实现外网访问","date":"2020-04-03T14:11:00.000Z","date_formatted":{"ll":"2020年4月3日","L":"2020/04/03","MM-DD":"04-03"},"updated":"2020-04-03T14:11:00.000Z","content":"相信各位家里面应该都有闲置的Android设备，反正也是闲置，不如利用起来搭建一个小网站。\n\n文章已失效，仅供参考\n前言\ntermux是什么：\n\nTermux是一个Android下一个高级的终端模拟器, 开源且不需要root, 支持apt管理软件包，十分方便安装软件包, 完美支持Python, PHP, Ruby, Go, Nodejs, MySQL等。\n\n一、优化termux使用\n因为一些原因，termux自带的软件源在国内的速度并不理想，所以我们先使用以下命令修改为清华大学提供的软件源。\n1234sed -i &#x27;s@^\\(deb.*stable main\\)$@#\\1\\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/termux-packages-24 stable main@&#x27; $PREFIX/etc/apt/sources.listsed -i &#x27;s@^\\(deb.*games stable\\)$@#\\1\\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/game-packages-24 games stable@&#x27; $PREFIX/etc/apt/sources.list.d/game.listsed -i &#x27;s@^\\(deb.*science stable\\)$@#\\1\\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/science-packages-24 science stable@&#x27; $PREFIX/etc/apt/sources.list.d/science.listpkg up\n输入： termux-setup-storage 获取并授予存储权限\n输入以下内容修复快捷键：\n1echo &quot;extra-keys = [[&#x27;ESC&#x27;,&#x27;TAB&#x27;,&#x27;CTRL&#x27;,&#x27;ALT&#x27;,&#x27;-&#x27;,&#x27;/&#x27;,&#x27;~&#x27;,&#x27;:&#x27;,&#x27;;&#x27;],[&#x27;[&#x27;,&#x27;!&#x27;,&#x27;PGUP&#x27;,&#x27;HOME&#x27;,&#x27;UP&#x27;,&#x27;END&#x27;,&#x27;PGDN&#x27;,&#x27;\\&quot;&#x27;,&#x27;]&#x27;],[&#x27;&#123;&#x27;,&#x27;&lt;&#x27;,&#x27;(&#x27;,&#x27;LEFT&#x27;,&#x27;DOWN&#x27;,&#x27;RIGHT&#x27;,&#x27;)&#x27;,&#x27;&gt;&#x27;,&#x27;&#125;&#x27;]]&quot; &gt;&gt; ~/.termux/termux.properties\n可选操作：\n安装zsh：\n1sh -c &quot;$(curl -fsSL https://gitee.com/idkzr/termux-ohmyzsh/raw/master/install.sh)&quot;\n二、安装Caddy MariaDB PHP\nCaddy是一个易于使用的通用web服务器。\nMariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可 MariaDB的目的是完全兼容MySQL，包括API和命令行，使之能轻松成为MySQL的代替品。\n使用 bash &lt;(curl https://idkzr.com/shell/acmp.sh)即可一键安装\n什么？不想使用一键命令？\n在Termux中依次执行\n123pkg i wget vim mariadb php php-fpm -ycurl https://getcaddy.com | bash -s personal\n三、配置MySql数据库\n输入 mysqld 启动数据库，启动完成后,这个会话就一直存活,类似与debug调试一样,只有新建会话才可以操作。\n新建一个termux会话\n输入mysql直接进入mariadb数据库，输入：\n1set password for &quot;root&quot;@&quot;localhost&quot; &#x3D; password(&quot;123456789&quot;)\n将123456789修改为你要使用的密码\n输入一下mysql_secure_installation进入快速设置向导，输入当前密码既可。\n下面根据个人偏好来进行设置,没有绝对的要求\nSet root password? [Y/n] n#是否设置新的root密码\nRemove anonymous users? [Y/n] Y#是否移除匿名用户\nDisallow root login remotely? [Y/n] n#是否不允许root远程登录\nRemovetestdatabase and access to it? [Y/n] n#是否移除test数据库\nReload privilege tables now? [Y/n] y#是否重新加载表的权限\n四、配置PHP-fpm\n输入vim ../usr/etc/php-fpm.d/www.conf\n找到：listen = /data/data/com.termux/files/usr/var/run/php-fpm.sock\n修改为：127.0.0.1:9000\n保存并退出\n输入 php-fpm 启动PHP\n五、配置Typecho\n在内置存储新建一个 www 文件夹\n使用ln -s /data/data/com.termux/files/home/storage/shared/www www将文件夹软连接到termux工作目录\n将typecho程序解压到内置存储 www 文件夹中\n输入 caddy启动web服务\n六、配置frp\n新建一个termux会话\n输入下方命令\n123456789#下载frpc二进制文件mkdir frp &amp;&amp; cd frp &amp;&amp; wget https://qianqu.me/frp/frpc_linux_arm64 -O frpc &amp;&amp; chmod +x frpc#创建配置文件touch frpc.ini &amp;&amp; chmod +x frpc.inivim frpc.ini\n将配置文件粘贴到frpc.ini中\n输入./frpc启动frp\nEND\n","thumbnail":"https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/acmp/cover.jpg","color":"#111","plink":"https://blog.zr.ci/posts/acmp/"},{"title":"可能是Windows上最强的开源任务管理器：Process Hacker","date":"2020-03-03T14:11:00.000Z","date_formatted":{"ll":"2020年3月3日","L":"2020/03/03","MM-DD":"03-03"},"updated":"2020-03-03T14:21:00.000Z","content":"※建议从头读到尾流畅阅读。分块阅读将损失体验。\n稍微会玩点 Windows 的用户，都跟内置的任务管理器打过交道。\n当然，今天不讲任务管理器，虽然经过微软百代改进，任务管理器变得更加人性化，界面更加好看，但是除此之外一无是处，真的是个彻头彻尾的垃圾。\n\n\n前些日子，V2EX 上有人说 TIM 电脑版会扫描硬盘，这个我还是第一次知道，就用 Process Hacker 挂着看，没遇到问题，就只是告诉了我曾经的同学。正好几天前，同学截图，TIM 的子进程 Q 盾 开始读磁盘，比较卡，我就向他推荐 Process Hacker 看看腾讯到底在扫什么东西。最终他并没有安装。\n但很明显，任务管理器毛都看不出来 TIM 在读写什么。那么，有什么好点的任务管理器，能看到程序实时的读写情况？\n\n如图所见，Process Hacker 2 是任务管理器的替代。\n您可以在 https://processhacker.sourceforge.io/ 上下载它，它是 100% 开源，并且前几天还更新了的。具体可以下载源码自己编译一下。Release 是较早版本，够用，适用于大众的。\nGitHub: https://github.com/processhacker\n这种垃圾又复古，又是彩虹色的一条条的界面，真的损第一印象。我刚做完程序界面，为啥会推荐这个程序？因为这个“颜色”，是有深意的。\n\n当我关闭了一个应用程序后，这个任务管理器并不像 Taskmgr.exe，直接把这个进程剔除，而是显示红色并残留数秒，供你参考。\n\n在选项里可以更改这些设置，比如更改高亮时间、新建进程的颜色与被结束进程的颜色。同时，别的色彩会标亮特殊进程，更好区分。\n好，这个看上去也就一小功能啊，界面就这点改进还没汉化，为什么骗我下这个？\n这里举个例子，我用 Bittorrent 下一个 BDRip，连到一个垃圾迅雷，就硬吸我血，上传猛增，下载没有，还屏蔽不了。不为这个人专门开防火墙，也不换程序的话，看样子很难解决了。\n当然不是。\n\n只要知道对方的 IP 地址，就是手到擒来，不说关闭通讯录，想干嘛就干嘛。\n\n同样，腾讯 Q 盾也是不堪一击的，扫盘程序在扫描什么，都可以马上知道，不过这里还是推荐大家用沙盒安装国产程序。\n当然，Taskmgr.exe 是不允许你禁用 CPU 0 的，但是 Process Hacker 可以拒绝程序使用所有 CPU。\n\n说到占用，就不得不提现在 Taskmgr.exe 做的很好的“性能”对话框。那么在 Process Hacker 上面是怎么样的呢，一起看一下。\n\n\n如图，Process Hacker 完全舍弃了美观来做硬核之事。右边也可以看出，鼠标指针悬浮在上面就可以看到针对进程的占用量统计，而不是整一个的。这样更加明细。\n然后，如迅雷、百度云、aria2 这类下载应用，在你迅速拔下网线的时候，从几 M 开始，速度一直下到 1M，再下到 KB，最后短则几秒，长则十几秒的延迟，到底为什么会出现？这是因为套了个算法，而 Process Hacker 和 Taskmgr.exe 是绝对的实时，网线一拔直接归零。\n另外，从图中也能轻松看出，全部是采用 MB/s 单位显示，非常实用。\n\n所有操作选项\n\n这里还有一些优秀功能，这里也一并介绍。下图是它的小托盘，左下角可以更改其监测内容，以占用率高低排序。\n\n\n这个功能真的非常到位。有时候进程开太多，又搜索不到，比如 Chrome 怎么办？\n\nFind Window 功能可以精确到进程中的每一个控件，长按图标然后鼠标拖动到你要监测的窗口里，马上就会帮你找到进程。右侧 X 图标是拖动后结束进程的意思，当软件无响应时，你不需要去 Taskmgr.exe 那里找无响应进程并结束（并且还有些许延迟）。直接一拖就能结束。\n\n当然在属性窗口中还有诸多小插件（Plugin），比如 Comment 选项卡，能快速标记某个进程，重启也会保留此内容。还有，进程高亮功能也能是你快速在众多进程中找到那个该死的进程（Need-to-kill）。\n\n选项卡一览\n\n状态一览\n\n我们看一下 Environment。\n\n稍微会点电脑的编程中级高手都知道，这个 Environment 指的是系统全局变量或为环境。装过 Java 开发者多多少少都沾点过。通过这里，我们能欺骗程序或者作为伪沙盒，下面就是一个示例。\n\n好，我们看看 Thread 选项卡。\n\n很显而易见了。这里专门锁定这个程序的进程，并提供更详细的调试信息。\n在很多的调试软件中，内存是必不可少的。这个当然也是。\n\n还有很多实用的功能，这里就不一一列举了。当然，还有很多你可能用的到底功能，比如删除与添加服务（Service），我这里不再一一赘述了。既然你都看到了这里，也最好坚持看完吧，说不定你真的需要呢\n添加服务\n\n删除服务（有些服务真的用不到但是卸载不删，比如这个以及 Flash 中国版，Windows 服务里面删不掉，360 等虽然可以但是不推荐安装）\n\n然后是非常非常非常非常非常有用的东西，进程上传到反病毒网站，快速检测危险。\n\n\n如果你心动了，这里还提供一个功能，干掉 Windows 任务管理器 Taskmgr.exe，并以 Process Hacker 替代。当然，想用任务管理器的时候，Process Hacker 里面也是能够调用打开任务管理器的。所以可以放心用。\n\n那么这就是图文的全部了。如果你是开发者，我认为这个软件是你不得不装的 - 除非你是浑水摸鱼或者经常摸鱼。\n哦对了，你不喜欢微软雅黑？那爱什么字体换什么换什么字体，比如下面的。\n\n\n本文转自酷安@FlyfishMoe233\n已经原作者授权\n\n","thumbnail":"https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/processhacker/cover.jpg","color":"#111","plink":"https://blog.zr.ci/posts/process-hacker/"},{"title":"Termux基础美化-zsh","date":"2020-02-22T13:11:00.000Z","date_formatted":{"ll":"2020年2月22日","L":"2020/02/22","MM-DD":"02-22"},"updated":"2020-02-22T13:11:00.000Z","content":"看见别人的termux界面辣么漂亮，而自己的却是乌漆麻黑的，是不是很有差距？\n教你使用zsh代替bash作为默认shell\n\n直接使用一键安装脚本安装\n方便快捷，一步到位\n复制以下内容粘贴到Termux即可\n1sh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;gitee.com&#x2F;idkzr&#x2F;termux-ohmyzsh&#x2F;raw&#x2F;master&#x2F;install.sh)&quot; \n默认主题为 agnoster ，如需修改主题请编辑 .zshrc 文件\n将第一行 ZSH_THEME=“agnoster” 中双引号内的文字修改为你想使用的主题名称。\n输入zsht可调整字体及配色\nzsht脚本截图：\n\n字体截图：\n\n\n\n\n\n\n\n\n配色截图：\n\n\n\n\n\n\n\n\n\n主题推荐：\n\n本来是截了20个主题的图片的，但是手残，不小心del了，懒得截图了(◔◡◔)\n\nTips：\n如果报错请带图反馈！\n","thumbnail":"https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/termux-zsh/cover.jpg","color":"#111","plink":"https://blog.zr.ci/posts/termux-zsh/"},{"title":"社交蒸发冷却效应","date":"2020-02-14T12:58:43.000Z","date_formatted":{"ll":"2020年2月14日","L":"2020/02/14","MM-DD":"02-14"},"updated":"2020-02-14T12:58:43.000Z","content":"假设有一个高级社交圈，且开放的门槛极低。那么必定会不断的吸引新成员进入，逐渐，圈内成员平均水平会不断降低。\n\n这时，社交圈内价值最高的成员便会离开，随后，价值第二高的人也会离开。\n由此，便构成了一个恶性循环，每一层的消失都将降低整个圈子的质量。\n最终，归于平淡。\n\n该理论由硅谷的一名社交网络设计师提出。\n文章内容如有侵权，请联系本人删除。\n\n","thumbnail":"https://cdn.jsdelivr.net/gh/idkzr/static@master/imgs/sjzflq/cover.jpg","color":"#111","plink":"https://blog.zr.ci/posts/sjzflq/"},{"title":"关于","date":"2020-02-02T00:00:00.000Z","date_formatted":{"ll":"2020年2月2日","L":"2020/02/02","MM-DD":"02-02"},"updated":"2020-11-26T15:05:15.002Z","content":"首先，感谢你在数以亿计的站点中来到这里，这难道不是缘分吗？\n\n关于我\n\n昵称：箴扰\n性别：男\n爱好：♀\n箴扰是一名00后的初中生高中生，没什么技术，但又想做点什么。整天做着不切实际的梦，却不想付出努力。\n\n联系方式\n\nQQ：64317385\nMail：idkzrs#gmail.com\n\n关于本站\n\n因为兴趣，所以去做。\n程序： Hexo\n\n大事记\n\n最后更新于2020-07-01\n2020-07-01：\n更换域名为：zr.ci\n2019-12-17：\n重新开始，并启用新域名：idkzr.com\n2019-12-10：\n数据库没了，心态爆炸\n","plink":"https://blog.zr.ci/about/"},{"title":"邻居","date":"2020-02-02T00:00:00.000Z","date_formatted":{"ll":"2020年2月2日","L":"2020/02/02","MM-DD":"02-02"},"updated":"2020-11-26T15:05:15.006Z","content":"以下排名不分先后~\nEhmc技术资源博客\n于笙博客\n小K同學的博客\n動G Blog\nVincente’s Blog\n杏铃の小本\nRui.plus\nAlevel Blog\n\n本站信息&amp;友链模板：\nName：无名小筑\nSite：https://blog.zr.ci\nAvatar：https://blog.zr.ci/imgs/avatar.jpg\nDescription：一只咸鱼的日常\n留言或发送邮件至idkzrs@gmail.com申请友链\n\n","plink":"https://blog.zr.ci/links/"}]